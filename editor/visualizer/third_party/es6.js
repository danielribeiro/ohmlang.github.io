var es6 = ohm.makeRecipe(function() {
var buildSuperGrammar = (function() {
  var decl = this.newGrammar("ES5")
    .withSource("ES5 {\n\n  Program = Directive* SourceElement*\n\n  // §A.1 Lexical Grammar -- http://ecma-international.org/ecma-262/5.1/#sec-A.1\n\n  /*\n    Note: the following lexical conventions (see http://ecma-international.org/ecma-262/5.1/#sec-7)\n    are not implemented in this parser.\n\n    // Goal production in contexts where a leading \"/\" or \"/=\" is permitted:\n    InputElementDiv = whitespace | lineTerminator | comment | token | DivPunctuator\n\n    // Goal production in contexts where a leading \"/\" or \"/=' is not permitted:\n    InputElementRegExp = whitespace | lineTerminator | comment | token | regularExpressionLiteral\n  */\n\n  sourceCharacter = any\n\n  // Override Ohm's built-in definition of space.\n  space := whitespace | lineTerminator | comment\n\n  whitespace = \"\\t\"\n             | \"\\x0B\"    -- verticalTab\n             | \"\\x0C\"    -- formFeed\n             | \" \"\n             | \"\\u00A0\"  -- noBreakSpace\n             | \"\\uFEFF\"  -- byteOrderMark\n             | unicodeSpaceSeparator\n\n  lineTerminator = \"\\n\" | \"\\r\" | \"\\u2028\" | \"\\u2029\"\n  lineTerminatorSequence = \"\\n\" | \"\\r\" ~\"\\n\" | \"\\u2028\" | \"\\u2029\" | \"\\r\\n\"\n\n  comment = multiLineComment | singleLineComment\n\n  multiLineComment = \"/*\" (~\"*/\" sourceCharacter)* \"*/\"\n  singleLineComment = \"//\" (~lineTerminator sourceCharacter)*\n\n  identifier (an identifier) = ~reservedWord identifierName\n  identifierName = identifierStart identifierPart*\n\n  identifierStart = letter | \"$\" | \"_\"\n                  | \"\\\\\" unicodeEscapeSequence -- escaped\n  identifierPart = identifierStart | unicodeCombiningMark\n                 | unicodeDigit | unicodeConnectorPunctuation\n                 | \"\\u200C\" | \"\\u200D\"\n letter += unicodeCategoryNl\n  unicodeCategoryNl\n    = \"\\u2160\"..\"\\u2182\" | \"\\u3007\" | \"\\u3021\"..\"\\u3029\"\n  unicodeDigit (a digit)\n    = \"\\u0030\"..\"\\u0039\" | \"\\u0660\"..\"\\u0669\" | \"\\u06F0\"..\"\\u06F9\" | \"\\u0966\"..\"\\u096F\" | \"\\u09E6\"..\"\\u09EF\" | \"\\u0A66\"..\"\\u0A6F\" | \"\\u0AE6\"..\"\\u0AEF\" | \"\\u0B66\"..\"\\u0B6F\" | \"\\u0BE7\"..\"\\u0BEF\" | \"\\u0C66\"..\"\\u0C6F\" | \"\\u0CE6\"..\"\\u0CEF\" | \"\\u0D66\"..\"\\u0D6F\" | \"\\u0E50\"..\"\\u0E59\" | \"\\u0ED0\"..\"\\u0ED9\" | \"\\u0F20\"..\"\\u0F29\" | \"\\uFF10\"..\"\\uFF19\"\n\n  unicodeCombiningMark (a Unicode combining mark)\n    = \"\\u0300\"..\"\\u0345\" | \"\\u0360\"..\"\\u0361\" | \"\\u0483\"..\"\\u0486\" | \"\\u0591\"..\"\\u05A1\" | \"\\u05A3\"..\"\\u05B9\" | \"\\u05BB\"..\"\\u05BD\" | \"\\u05BF\"..\"\\u05BF\" | \"\\u05C1\"..\"\\u05C2\" | \"\\u05C4\"..\"\\u05C4\" | \"\\u064B\"..\"\\u0652\" | \"\\u0670\"..\"\\u0670\" | \"\\u06D6\"..\"\\u06DC\" | \"\\u06DF\"..\"\\u06E4\" | \"\\u06E7\"..\"\\u06E8\" | \"\\u06EA\"..\"\\u06ED\" | \"\\u0901\"..\"\\u0902\" | \"\\u093C\"..\"\\u093C\" | \"\\u0941\"..\"\\u0948\" | \"\\u094D\"..\"\\u094D\" | \"\\u0951\"..\"\\u0954\" | \"\\u0962\"..\"\\u0963\" | \"\\u0981\"..\"\\u0981\" | \"\\u09BC\"..\"\\u09BC\" | \"\\u09C1\"..\"\\u09C4\" | \"\\u09CD\"..\"\\u09CD\" | \"\\u09E2\"..\"\\u09E3\" | \"\\u0A02\"..\"\\u0A02\" | \"\\u0A3C\"..\"\\u0A3C\" | \"\\u0A41\"..\"\\u0A42\" | \"\\u0A47\"..\"\\u0A48\" | \"\\u0A4B\"..\"\\u0A4D\" | \"\\u0A70\"..\"\\u0A71\" | \"\\u0A81\"..\"\\u0A82\" | \"\\u0ABC\"..\"\\u0ABC\" | \"\\u0AC1\"..\"\\u0AC5\" | \"\\u0AC7\"..\"\\u0AC8\" | \"\\u0ACD\"..\"\\u0ACD\" | \"\\u0B01\"..\"\\u0B01\" | \"\\u0B3C\"..\"\\u0B3C\" | \"\\u0B3F\"..\"\\u0B3F\" | \"\\u0B41\"..\"\\u0B43\" | \"\\u0B4D\"..\"\\u0B4D\" | \"\\u0B56\"..\"\\u0B56\" | \"\\u0B82\"..\"\\u0B82\" | \"\\u0BC0\"..\"\\u0BC0\" | \"\\u0BCD\"..\"\\u0BCD\" | \"\\u0C3E\"..\"\\u0C40\" | \"\\u0C46\"..\"\\u0C48\" | \"\\u0C4A\"..\"\\u0C4D\" | \"\\u0C55\"..\"\\u0C56\" | \"\\u0CBF\"..\"\\u0CBF\" | \"\\u0CC6\"..\"\\u0CC6\" | \"\\u0CCC\"..\"\\u0CCD\" | \"\\u0D41\"..\"\\u0D43\" | \"\\u0D4D\"..\"\\u0D4D\" | \"\\u0E31\"..\"\\u0E31\" | \"\\u0E34\"..\"\\u0E3A\" | \"\\u0E47\"..\"\\u0E4E\" | \"\\u0EB1\"..\"\\u0EB1\" | \"\\u0EB4\"..\"\\u0EB9\" | \"\\u0EBB\"..\"\\u0EBC\" | \"\\u0EC8\"..\"\\u0ECD\" | \"\\u0F18\"..\"\\u0F19\" | \"\\u0F35\"..\"\\u0F35\" | \"\\u0F37\"..\"\\u0F37\" | \"\\u0F39\"..\"\\u0F39\" | \"\\u0F71\"..\"\\u0F7E\" | \"\\u0F80\"..\"\\u0F84\" | \"\\u0F86\"..\"\\u0F87\" | \"\\u0F90\"..\"\\u0F95\" | \"\\u0F97\"..\"\\u0F97\" | \"\\u0F99\"..\"\\u0FAD\" | \"\\u0FB1\"..\"\\u0FB7\" | \"\\u0FB9\"..\"\\u0FB9\" | \"\\u20D0\"..\"\\u20DC\" | \"\\u20E1\"..\"\\u20E1\" | \"\\u302A\"..\"\\u302F\" | \"\\u3099\"..\"\\u309A\" | \"\\uFB1E\"..\"\\uFB1E\" | \"\\uFE20\"..\"\\uFE23\"\n\n  unicodeConnectorPunctuation = \"\\u005F\" | \"\\u203F\"..\"\\u2040\" | \"\\u30FB\" | \"\\uFE33\"..\"\\uFE34\" | \"\\uFE4D\"..\"\\uFE4F\" | \"\\uFF3F\" | \"\\uFF65\"\n  unicodeSpaceSeparator = \"\\u2000\"..\"\\u200B\" | \"\\u3000\"\n\n  reservedWord = keyword | futureReservedWord | nullLiteral | booleanLiteral\n\n  // Note: keywords that are the complete prefix of another keyword should\n  // be prioritized (e.g. 'in' should come before 'instanceof')\n  keyword = break    | do        | instanceof | typeof\n          | case     | else      | new        | var\n          | catch    | finally   | return     | void\n          | continue | for       | switch     | while\n          | debugger | function  | this       | with\n          | default  | if        | throw\n          | delete   | in        | try\n\n  futureReservedWordLax = class  | enum  | extends\n                        | super  | const | export\n                        | import\n\n  futureReservedWordStrict = futureReservedWordLax\n                           | implements | let     | private   | public\n                           | interface  | package | protected | static\n                           | yield\n\n  futureReservedWord = futureReservedWordStrict\n\n  /*\n    Note: Punctuator and DivPunctuator (see https://es5.github.io/x7.html#x7.7) are\n    not currently used by this grammar.\n  */\n\n  literal = nullLiteral | booleanLiteral | numericLiteral\n          | stringLiteral | regularExpressionLiteral // spec forgot Regexp literals in appendix?\n  nullLiteral = \"null\" ~identifierPart\n  booleanLiteral = (\"true\" | \"false\") ~identifierPart\n\n  // For semantics on how decimal literals are constructed, see section 7.8.3\n\n  // Note that the ordering of hexIntegerLiteral and decimalLiteral is reversed w.r.t. the spec\n  // This is intentional: the order decimalLiteral | hexIntegerLiteral will parse\n  // \"0x...\" as a decimal literal \"0\" followed by \"x...\"\n  numericLiteral = octalIntegerLiteral | hexIntegerLiteral | decimalLiteral\n\n  decimalLiteral = decimalIntegerLiteral \".\" decimalDigit* exponentPart -- bothParts\n                 |                       \".\" decimalDigit+ exponentPart -- decimalsOnly\n                 | decimalIntegerLiteral                   exponentPart -- integerOnly\n\n  decimalIntegerLiteral = nonZeroDigit decimalDigit*  -- nonZero\n                        | \"0\"                         -- zero\n  decimalDigit = \"0\"..\"9\"\n  nonZeroDigit = \"1\"..\"9\"\n\n  exponentPart = exponentIndicator signedInteger -- present\n               |                                 -- absent\n  exponentIndicator = \"e\" | \"E\"\n  signedInteger = \"+\" decimalDigit* -- positive\n                | \"-\" decimalDigit* -- negative\n                |     decimalDigit+ -- noSign\n\n  hexIntegerLiteral = \"0x\" hexDigit+\n                    | \"0X\" hexDigit+\n\n  // hexDigit defined in Ohm's built-in rules (otherwise: hexDigit = \"0\"..\"9\" | \"a\"..\"f\" | \"A\"..\"F\")\n\n  octalIntegerLiteral = \"0\" octalDigit+\n\n  octalDigit = \"0\"..\"7\"\n\n  // For semantics on how string literals are constructed, see section 7.8.4\n  stringLiteral = \"\\\"\" doubleStringCharacter* \"\\\"\"\n                | \"'\" singleStringCharacter* \"'\"\n  doubleStringCharacter = ~(\"\\\"\" | \"\\\\\" | lineTerminator) sourceCharacter -- nonEscaped\n                        | \"\\\\\" escapeSequence                             -- escaped\n                        | lineContinuation                                -- lineContinuation\n  singleStringCharacter = ~(\"'\" | \"\\\\\" | lineTerminator) sourceCharacter -- nonEscaped\n                        | \"\\\\\" escapeSequence                            -- escaped\n                        | lineContinuation                               -- lineContinuation\n  lineContinuation = \"\\\\\" lineTerminatorSequence\n  escapeSequence = unicodeEscapeSequence\n                 | hexEscapeSequence\n                 | octalEscapeSequence\n                 | characterEscapeSequence  // Must come last.\n  characterEscapeSequence = singleEscapeCharacter\n                          | nonEscapeCharacter\n  singleEscapeCharacter = \"'\" | \"\\\"\" | \"\\\\\" | \"b\" | \"f\" | \"n\" | \"r\" | \"t\" | \"v\"\n  nonEscapeCharacter = ~(escapeCharacter | lineTerminator) sourceCharacter\n  escapeCharacter = singleEscapeCharacter | decimalDigit | \"x\" | \"u\"\n  octalEscapeSequence = zeroToThree octalDigit octalDigit    -- whole\n                      | fourToSeven octalDigit               -- eightTimesfourToSeven\n                      | zeroToThree octalDigit ~decimalDigit -- eightTimesZeroToThree\n                      | octalDigit ~decimalDigit             -- octal\n  hexEscapeSequence = \"x\" hexDigit hexDigit\n  unicodeEscapeSequence = \"u\" hexDigit hexDigit hexDigit hexDigit\n\n  zeroToThree = \"0\"..\"3\"\n  fourToSeven = \"4\"..\"7\"\n\n  // §7.8.5 Regular Expression Literals -- http://ecma-international.org/ecma-262/5.1/#sec-7.8.5\n\n  regularExpressionLiteral = \"/\" regularExpressionBody \"/\" regularExpressionFlags\n  regularExpressionBody = regularExpressionFirstChar regularExpressionChar*\n  regularExpressionFirstChar = ~(\"*\" | \"\\\\\" | \"/\" | \"[\") regularExpressionNonTerminator\n                             | regularExpressionBackslashSequence\n                             | regularExpressionClass\n  regularExpressionChar = ~(\"\\\\\" | \"/\" | \"[\") regularExpressionNonTerminator\n                        | regularExpressionBackslashSequence\n                        | regularExpressionClass\n  regularExpressionBackslashSequence = \"\\\\\" regularExpressionNonTerminator\n  regularExpressionNonTerminator = ~(lineTerminator) sourceCharacter\n  regularExpressionClass = \"[\" regularExpressionClassChar* \"]\"\n  regularExpressionClassChar = ~(\"]\" | \"\\\\\") regularExpressionNonTerminator\n                             | regularExpressionBackslashSequence\n  regularExpressionFlags = identifierPart*\n\n  // === Implementation-level rules (not part of the spec) ===\n\n  multiLineCommentNoNL = \"/*\" (~(\"*/\" | lineTerminator) sourceCharacter)* \"*/\"\n\n  // does not accept lineTerminators, not even implicit ones in a multiLineComment (cf. section 7.4)\n  spacesNoNL = (whitespace | singleLineComment | multiLineCommentNoNL)*\n\n  // A semicolon is \"automatically inserted\" if a newline or the end of the input stream is\n  // reached, or the offending token is \"}\".\n  // See http://ecma-international.org/ecma-262/5.1/#sec-7.9 for more information.\n  // NOTE: Applications of this rule *must* appear in a lexical context -- either in the body of a\n  // lexical rule, or inside `#()`.\n  sc = space* (\";\" | end)\n     | spacesNoNL (lineTerminator | ~multiLineCommentNoNL multiLineComment | &\"}\")\n\n  // Convenience rules for parsing keyword tokens.\n  break = \"break\" ~identifierPart\n  do = \"do\" ~identifierPart\n  instanceof = \"instanceof\" ~identifierPart\n  typeof = \"typeof\" ~identifierPart\n  case = \"case\" ~identifierPart\n  else = \"else\" ~identifierPart\n  new = \"new\" ~identifierPart\n  var = \"var\" ~identifierPart\n  catch = \"catch\" ~identifierPart\n  finally = \"finally\" ~identifierPart\n  return = \"return\" ~identifierPart\n  void = \"void\" ~identifierPart\n  continue = \"continue\" ~identifierPart\n  for = \"for\" ~identifierPart\n  switch = \"switch\" ~identifierPart\n  while = \"while\" ~identifierPart\n  debugger = \"debugger\" ~identifierPart\n  function = \"function\" ~identifierPart\n  this = \"this\" ~identifierPart\n  with = \"with\" ~identifierPart\n  default = \"default\" ~identifierPart\n  if = \"if\" ~identifierPart\n  throw = \"throw\" ~identifierPart\n  delete = \"delete\" ~identifierPart\n  in = \"in\" ~identifierPart\n  try = \"try\" ~identifierPart\n  get = \"get\" ~identifierPart\n  set = \"set\" ~identifierPart\n  class = \"class\" ~identifierPart\n  enum = \"enum\" ~identifierPart\n  extends = \"extends\" ~identifierPart\n  super = \"super\" ~identifierPart\n  const = \"const\" ~identifierPart\n  export = \"export\" ~identifierPart\n  import = \"import\" ~identifierPart\n  implements = \"implements\" ~identifierPart\n  let = \"let\" ~identifierPart\n  private = \"private\" ~identifierPart\n  public = \"public\" ~identifierPart\n  interface = \"interface\" ~identifierPart\n  package = \"package\" ~identifierPart\n  protected = \"protected\" ~identifierPart\n  static = \"static\" ~identifierPart\n  yield = \"yield\" ~identifierPart\n  \n  // end of lexical rules\n\n  noIn = ~in\n  withIn =\n\n  // §A.3 Expressions -- http://ecma-international.org/ecma-262/5.1/#sec-A.3\n\n  PrimaryExpression = this\n                    | identifier\n                    | literal\n                      // ( litToken.type === \"regexp\"\n                      //   ? this.ast(_fromIdx, \"RegExpExpr\",{body:  litToken.value.body\n                      //                            flags: litToken.value.flags}, [])\n                      //   : this.ast(_fromIdx, \"LiteralExpr\",{type:  litToken.type\n                      //                             value: litToken.value}, []) )\n                    | ArrayLiteral\n                    | ObjectLiteral\n                    | \"(\" Expression<withIn> \")\"  -- parenExpr\n\n  ArrayLiteral = \"[\" ListOf<AssignmentExpressionOrElision, \",\"> \"]\"\n  AssignmentExpressionOrElision = AssignmentExpression<withIn>\n                                |                       -- elision\n\n  ObjectLiteral = \"{\" ListOf<PropertyAssignment, \",\"> \"}\"              -- noTrailingComma\n                | \"{\" NonemptyListOf<PropertyAssignment, \",\"> \",\" \"}\"  -- trailingComma\n\n  PropertyAssignment = get PropertyName \"(\" \")\" \"{\" FunctionBody \"}\"                  -- getter\n                     | set PropertyName \"(\" FormalParameter \")\" \"{\" FunctionBody \"}\"  -- setter\n                     | PropertyName \":\" AssignmentExpression<withIn>                  -- simple\n\n  PropertyName = identifierName\n               | stringLiteral\n               | numericLiteral\n\n  MemberExpression = MemberExpression \"[\" Expression<withIn> \"]\"  -- arrayRefExp\n                   | MemberExpression \".\" identifierName  -- propRefExp\n                   | new MemberExpression Arguments       -- newExp\n                   | FunctionExpression\n                   | PrimaryExpression\n\n  NewExpression = MemberExpression\n                | new NewExpression -- newExp\n\n  CallExpression = CallExpression \"[\" Expression<withIn> \"]\"  -- arrayRefExp\n                 | CallExpression \".\" identifierName  -- propRefExp\n                 | CallExpression Arguments           -- callExpExp\n                 | MemberExpression Arguments         -- memberExpExp\n\n  Arguments = \"(\" ListOf<AssignmentExpression<withIn>, \",\"> \")\"\n\n  LeftHandSideExpression = CallExpression\n                         | NewExpression\n\n  PostfixExpression = LeftHandSideExpression #(spacesNoNL \"++\")  -- postIncrement\n                    | LeftHandSideExpression #(spacesNoNL \"--\")  -- postDecrement\n                    | LeftHandSideExpression\n\n  UnaryExpression = delete UnaryExpression  -- deleteExp\n                  | void   UnaryExpression  -- voidExp\n                  | typeof UnaryExpression  -- typeofExp\n                  | \"++\"   UnaryExpression  -- preIncrement\n                  | \"--\"   UnaryExpression  -- preDecrement\n                  | \"+\"    UnaryExpression  -- unaryPlus\n                  | \"-\"    UnaryExpression  -- unaryMinus\n                  | \"~\"    UnaryExpression  -- bnot\n                  | \"!\"    UnaryExpression  -- lnot\n                  | PostfixExpression\n\n  MultiplicativeExpression = MultiplicativeExpression \"*\" UnaryExpression -- mul\n                           | MultiplicativeExpression \"/\" UnaryExpression -- div\n                           | MultiplicativeExpression \"%\" UnaryExpression -- mod\n                           | UnaryExpression\n\n  AdditiveExpression = AdditiveExpression \"+\" MultiplicativeExpression -- add\n                     | AdditiveExpression \"-\" MultiplicativeExpression -- sub\n                     | MultiplicativeExpression\n\n  ShiftExpression = ShiftExpression \"<<\" AdditiveExpression  -- lsl\n                  | ShiftExpression \">>>\" AdditiveExpression -- lsr\n                  | ShiftExpression \">>\" AdditiveExpression  -- asr\n                  | AdditiveExpression\n\n  RelationalExpression<guardIn>\n    = RelationalExpression<guardIn> \"<\" ShiftExpression           -- lt\n    | RelationalExpression<guardIn> \">\" ShiftExpression           -- gt\n    | RelationalExpression<guardIn> \"<=\" ShiftExpression          -- le\n    | RelationalExpression<guardIn> \">=\" ShiftExpression          -- ge\n    | RelationalExpression<guardIn> \"instanceof\" ShiftExpression  -- instanceOfExp\n    | RelationalExpression<guardIn> guardIn \"in\" ShiftExpression  -- inExp\n    | ShiftExpression\n\n  EqualityExpression<guardIn>\n    = EqualityExpression<guardIn> \"==\" RelationalExpression<guardIn>  -- equal\n    | EqualityExpression<guardIn> \"!=\" RelationalExpression<guardIn>  -- notEqual\n    | EqualityExpression<guardIn> \"===\" RelationalExpression<guardIn> -- eq\n    | EqualityExpression<guardIn> \"!==\" RelationalExpression<guardIn> -- notEq\n    | RelationalExpression<guardIn>\n\n  BitwiseANDExpression<guardIn>\n    = BitwiseANDExpression<guardIn> \"&\" EqualityExpression<guardIn> -- band\n    | EqualityExpression<guardIn>\n\n  BitwiseXORExpression<guardIn>\n    = BitwiseXORExpression<guardIn> \"^\" BitwiseANDExpression<guardIn> -- bxor\n    | BitwiseANDExpression<guardIn>\n\n  BitwiseORExpression<guardIn>\n    = BitwiseORExpression<guardIn> \"|\" BitwiseXORExpression<guardIn> -- bor\n    | BitwiseXORExpression<guardIn>\n\n  LogicalANDExpression<guardIn>\n    = LogicalANDExpression<guardIn> \"&&\" BitwiseORExpression<guardIn> -- land\n    | BitwiseORExpression<guardIn>\n\n  LogicalORExpression<guardIn>\n    = LogicalORExpression<guardIn> \"||\" LogicalANDExpression<guardIn> -- lor\n    | LogicalANDExpression<guardIn>\n\n  ConditionalExpression<guardIn>\n    = LogicalORExpression<guardIn> \"?\" AssignmentExpression<withIn> \":\" AssignmentExpression<guardIn> -- conditional\n    | LogicalORExpression<guardIn>\n\n  AssignmentExpression<guardIn>\n    = LeftHandSideExpression AssignmentOperator AssignmentExpression<guardIn> -- assignment\n    | ConditionalExpression<guardIn>\n\n  Expression<guardIn> (an expression)\n    = Expression<guardIn> \",\" AssignmentExpression<guardIn> -- commaExp\n    | AssignmentExpression<guardIn>\n\n  AssignmentOperator = \"=\" | \">>>=\" | \"<<=\" | \">>=\"\n                     | \"*=\" | \"/=\" | \"%=\" | \"+=\" | \"-=\" | \"&=\" | \"^=\" | \"|=\"\n\n  // §A.4 Statements -- http://ecma-international.org/ecma-262/5.1/#sec-A.4\n\n  Statement\n    = Block\n    | VariableStatement\n    | EmptyStatement\n    | ExpressionStatement\n    | IfStatement\n    | IterationStatement\n    | ContinueStatement\n    | BreakStatement\n    | ReturnStatement\n    | WithStatement\n    | LabelledStatement\n    | SwitchStatement\n    | ThrowStatement\n    | TryStatement\n    | DebuggerStatement\n\n  Block = \"{\" StatementList \"}\"\n\n  StatementList = Statement*\n\n  VariableStatement = var VariableDeclarationList<withIn> #sc\n\n  VariableDeclarationList<guardIn> = NonemptyListOf<VariableDeclaration<guardIn>, \",\">\n\n  VariableDeclaration<guardIn> = identifier Initialiser<guardIn>?\n\n  Initialiser<guardIn> = \"=\" AssignmentExpression<guardIn>\n\n  EmptyStatement = \";\" // note: this semicolon eats newlines\n\n  ExpressionStatement = ~(\"{\" | function) Expression<withIn> #sc\n\n  IfStatement = if \"(\" Expression<withIn> \")\" Statement (else Statement)?\n\n  IterationStatement = do Statement while \"(\" Expression<withIn> \")\" #sc  -- doWhile\n                     | while \"(\" Expression<withIn> \")\" Statement           -- whileDo\n                     | for \"(\" Expression<noIn>? \";\"\n                                 Expression<withIn>? \";\"\n                                 Expression<withIn>? \")\" Statement          -- for3\n                     | for \"(\" var VariableDeclarationList<noIn> \";\"\n                                 Expression<withIn>? \";\"\n                                 Expression<withIn>? \")\" Statement          -- for3var\n                     | for \"(\" LeftHandSideExpression in\n                                 Expression<withIn> \")\" Statement           -- forIn\n                     | for \"(\" var VariableDeclaration<noIn> in\n                                 Expression<withIn> \")\" Statement           -- forInVar\n\n  ContinueStatement = continue #((spacesNoNL identifier)? sc)\n\n  BreakStatement = break #((spacesNoNL identifier)? sc)\n\n  ReturnStatement = return (#(spacesNoNL ~space) Expression<withIn>)? #sc\n\n  WithStatement = with \"(\" Expression<withIn> \")\" Statement\n\n  SwitchStatement = switch \"(\" Expression<withIn> \")\" CaseBlock\n\n  CaseBlock = \"{\" CaseClause* DefaultClause CaseClause* \"}\"  -- withDefault\n            | \"{\"                           CaseClause* \"}\"  -- withoutDefault\n\n  CaseClause = case Expression<withIn> \":\" Statement*\n\n  DefaultClause = default \":\" Statement*\n\n  LabelledStatement = identifier \":\" Statement\n\n  ThrowStatement = throw Expression<withIn> #sc  -- throwExpr\n\n  TryStatement = try Block Catch Finally  -- tryCatchFinally\n               | try Block Finally        -- tryFinally\n               | try Block Catch          -- tryCatch\n\n  Catch = catch \"(\" FormalParameter \")\" Block\n\n  Finally = finally Block\n\n  DebuggerStatement = #(debugger sc)\n\n  // §A.5 Functions and Programs -- http://ecma-international.org/ecma-262/5.1/#sec-A.5\n\n  FunctionDeclaration\n    = function identifier \"(\" FormalParameterList \")\" \"{\" FunctionBody \"}\"\n\n  FunctionExpression\n    = function identifier \"(\" FormalParameterList \")\" \"{\" FunctionBody \"}\"  -- named\n    | function \"(\" FormalParameterList \")\" \"{\" FunctionBody \"}\"             -- anonymous\n\n  FormalParameterList = ListOf<FormalParameter, \",\">\n\n  FormalParameter = identifier\n\n  FunctionBody = Directive* SourceElement*\n\n  SourceElement = Declaration | Statement\n\n  // Broken out so es6 can override to include ConstDecl and LetDecl\n  Declaration = FunctionDeclaration\n\n  Directive = stringLiteral #sc\n}")
    .withDefaultStartRule("Program")
  return decl
    .define("Program", [], this.seq(this.star(this.app("Directive").withInterval(decl.sourceInterval(19, 28))).withInterval(decl.sourceInterval(19, 29)), this.star(this.app("SourceElement").withInterval(decl.sourceInterval(30, 43))).withInterval(decl.sourceInterval(30, 44))).withInterval(decl.sourceInterval(19, 44)))
    .define("sourceCharacter", [], this.app("any").withInterval(decl.sourceInterval(641, 644)))
    .override("space", [], this.alt(this.app("whitespace").withInterval(decl.sourceInterval(707, 717)), this.app("lineTerminator").withInterval(decl.sourceInterval(720, 734)), this.app("comment").withInterval(decl.sourceInterval(737, 744))).withInterval(decl.sourceInterval(707, 744)))
    .define("whitespace_verticalTab", [], this.terminal("\u000b").withInterval(decl.sourceInterval(781, 787)))
    .define("whitespace_formFeed", [], this.terminal("\f").withInterval(decl.sourceInterval(821, 827)))
    .define("whitespace_noBreakSpace", [], this.terminal(" ").withInterval(decl.sourceInterval(877, 885)))
    .define("whitespace_byteOrderMark", [], this.terminal("﻿").withInterval(decl.sourceInterval(918, 926)))
    .define("whitespace", [], this.alt(this.terminal("\t").withInterval(decl.sourceInterval(761, 765)), this.app("whitespace_verticalTab").withInterval(decl.sourceInterval(781, 787)), this.app("whitespace_formFeed").withInterval(decl.sourceInterval(821, 827)), this.terminal(" ").withInterval(decl.sourceInterval(858, 861)), this.app("whitespace_noBreakSpace").withInterval(decl.sourceInterval(877, 885)), this.app("whitespace_byteOrderMark").withInterval(decl.sourceInterval(918, 926)), this.app("unicodeSpaceSeparator").withInterval(decl.sourceInterval(960, 981))).withInterval(decl.sourceInterval(761, 981)))
    .define("lineTerminator", [], this.alt(this.terminal("\n").withInterval(decl.sourceInterval(1002, 1006)), this.terminal("\r").withInterval(decl.sourceInterval(1009, 1013)), this.terminal("\u2028").withInterval(decl.sourceInterval(1016, 1024)), this.terminal("\u2029").withInterval(decl.sourceInterval(1027, 1035))).withInterval(decl.sourceInterval(1002, 1035)))
    .define("lineTerminatorSequence", [], this.alt(this.terminal("\n").withInterval(decl.sourceInterval(1063, 1067)), this.seq(this.terminal("\r").withInterval(decl.sourceInterval(1070, 1074)), this.not(this.terminal("\n").withInterval(decl.sourceInterval(1076, 1080))).withInterval(decl.sourceInterval(1075, 1080))).withInterval(decl.sourceInterval(1070, 1080)), this.terminal("\u2028").withInterval(decl.sourceInterval(1083, 1091)), this.terminal("\u2029").withInterval(decl.sourceInterval(1094, 1102)), this.terminal("\r\n").withInterval(decl.sourceInterval(1105, 1111))).withInterval(decl.sourceInterval(1063, 1111)))
    .define("comment", [], this.alt(this.app("multiLineComment").withInterval(decl.sourceInterval(1125, 1141)), this.app("singleLineComment").withInterval(decl.sourceInterval(1144, 1161))).withInterval(decl.sourceInterval(1125, 1161)))
    .define("multiLineComment", [], this.seq(this.terminal("/*").withInterval(decl.sourceInterval(1184, 1188)), this.star(this.seq(this.not(this.terminal("*/").withInterval(decl.sourceInterval(1191, 1195))).withInterval(decl.sourceInterval(1190, 1195)), this.app("sourceCharacter").withInterval(decl.sourceInterval(1196, 1211))).withInterval(decl.sourceInterval(1190, 1211))).withInterval(decl.sourceInterval(1189, 1213)), this.terminal("*/").withInterval(decl.sourceInterval(1214, 1218))).withInterval(decl.sourceInterval(1184, 1218)))
    .define("singleLineComment", [], this.seq(this.terminal("//").withInterval(decl.sourceInterval(1241, 1245)), this.star(this.seq(this.not(this.app("lineTerminator").withInterval(decl.sourceInterval(1248, 1262))).withInterval(decl.sourceInterval(1247, 1262)), this.app("sourceCharacter").withInterval(decl.sourceInterval(1263, 1278))).withInterval(decl.sourceInterval(1247, 1278))).withInterval(decl.sourceInterval(1246, 1280))).withInterval(decl.sourceInterval(1241, 1280)))
    .define("identifier", [], this.seq(this.not(this.app("reservedWord").withInterval(decl.sourceInterval(1314, 1326))).withInterval(decl.sourceInterval(1313, 1326)), this.app("identifierName").withInterval(decl.sourceInterval(1327, 1341))).withInterval(decl.sourceInterval(1313, 1341)), "an identifier")
    .define("identifierName", [], this.seq(this.app("identifierStart").withInterval(decl.sourceInterval(1361, 1376)), this.star(this.app("identifierPart").withInterval(decl.sourceInterval(1377, 1391))).withInterval(decl.sourceInterval(1377, 1392))).withInterval(decl.sourceInterval(1361, 1392)))
    .define("identifierStart_escaped", [], this.seq(this.terminal("\\").withInterval(decl.sourceInterval(1453, 1457)), this.app("unicodeEscapeSequence").withInterval(decl.sourceInterval(1458, 1479))).withInterval(decl.sourceInterval(1453, 1479)))
    .define("identifierStart", [], this.alt(this.app("letter").withInterval(decl.sourceInterval(1414, 1420)), this.terminal("$").withInterval(decl.sourceInterval(1423, 1426)), this.terminal("_").withInterval(decl.sourceInterval(1429, 1432)), this.app("identifierStart_escaped").withInterval(decl.sourceInterval(1453, 1479))).withInterval(decl.sourceInterval(1414, 1490)))
    .define("identifierPart", [], this.alt(this.app("identifierStart").withInterval(decl.sourceInterval(1510, 1525)), this.app("unicodeCombiningMark").withInterval(decl.sourceInterval(1528, 1548)), this.app("unicodeDigit").withInterval(decl.sourceInterval(1568, 1580)), this.app("unicodeConnectorPunctuation").withInterval(decl.sourceInterval(1583, 1610)), this.terminal("‌").withInterval(decl.sourceInterval(1630, 1638)), this.terminal("‍").withInterval(decl.sourceInterval(1641, 1649))).withInterval(decl.sourceInterval(1510, 1649)))
    .extend("letter", [], this.app("unicodeCategoryNl").withInterval(decl.sourceInterval(1661, 1678)))
    .define("unicodeCategoryNl", [], this.alt(this.range("Ⅰ", "ↂ").withInterval(decl.sourceInterval(1705, 1723)), this.terminal("〇").withInterval(decl.sourceInterval(1726, 1734)), this.range("〡", "〩").withInterval(decl.sourceInterval(1737, 1755))).withInterval(decl.sourceInterval(1705, 1755)))
    .define("unicodeDigit", [], this.alt(this.range("0", "9").withInterval(decl.sourceInterval(1787, 1805)), this.range("٠", "٩").withInterval(decl.sourceInterval(1808, 1826)), this.range("۰", "۹").withInterval(decl.sourceInterval(1829, 1847)), this.range("०", "९").withInterval(decl.sourceInterval(1850, 1868)), this.range("০", "৯").withInterval(decl.sourceInterval(1871, 1889)), this.range("੦", "੯").withInterval(decl.sourceInterval(1892, 1910)), this.range("૦", "૯").withInterval(decl.sourceInterval(1913, 1931)), this.range("୦", "୯").withInterval(decl.sourceInterval(1934, 1952)), this.range("௧", "௯").withInterval(decl.sourceInterval(1955, 1973)), this.range("౦", "౯").withInterval(decl.sourceInterval(1976, 1994)), this.range("೦", "೯").withInterval(decl.sourceInterval(1997, 2015)), this.range("൦", "൯").withInterval(decl.sourceInterval(2018, 2036)), this.range("๐", "๙").withInterval(decl.sourceInterval(2039, 2057)), this.range("໐", "໙").withInterval(decl.sourceInterval(2060, 2078)), this.range("༠", "༩").withInterval(decl.sourceInterval(2081, 2099)), this.range("０", "９").withInterval(decl.sourceInterval(2102, 2120))).withInterval(decl.sourceInterval(1787, 2120)), "a digit")
    .define("unicodeCombiningMark", [], this.alt(this.range("̀", "ͅ").withInterval(decl.sourceInterval(2178, 2196)), this.range("͠", "͡").withInterval(decl.sourceInterval(2199, 2217)), this.range("҃", "҆").withInterval(decl.sourceInterval(2220, 2238)), this.range("֑", "֡").withInterval(decl.sourceInterval(2241, 2259)), this.range("֣", "ֹ").withInterval(decl.sourceInterval(2262, 2280)), this.range("ֻ", "ֽ").withInterval(decl.sourceInterval(2283, 2301)), this.range("ֿ", "ֿ").withInterval(decl.sourceInterval(2304, 2322)), this.range("ׁ", "ׂ").withInterval(decl.sourceInterval(2325, 2343)), this.range("ׄ", "ׄ").withInterval(decl.sourceInterval(2346, 2364)), this.range("ً", "ْ").withInterval(decl.sourceInterval(2367, 2385)), this.range("ٰ", "ٰ").withInterval(decl.sourceInterval(2388, 2406)), this.range("ۖ", "ۜ").withInterval(decl.sourceInterval(2409, 2427)), this.range("۟", "ۤ").withInterval(decl.sourceInterval(2430, 2448)), this.range("ۧ", "ۨ").withInterval(decl.sourceInterval(2451, 2469)), this.range("۪", "ۭ").withInterval(decl.sourceInterval(2472, 2490)), this.range("ँ", "ं").withInterval(decl.sourceInterval(2493, 2511)), this.range("़", "़").withInterval(decl.sourceInterval(2514, 2532)), this.range("ु", "ै").withInterval(decl.sourceInterval(2535, 2553)), this.range("्", "्").withInterval(decl.sourceInterval(2556, 2574)), this.range("॑", "॔").withInterval(decl.sourceInterval(2577, 2595)), this.range("ॢ", "ॣ").withInterval(decl.sourceInterval(2598, 2616)), this.range("ঁ", "ঁ").withInterval(decl.sourceInterval(2619, 2637)), this.range("়", "়").withInterval(decl.sourceInterval(2640, 2658)), this.range("ু", "ৄ").withInterval(decl.sourceInterval(2661, 2679)), this.range("্", "্").withInterval(decl.sourceInterval(2682, 2700)), this.range("ৢ", "ৣ").withInterval(decl.sourceInterval(2703, 2721)), this.range("ਂ", "ਂ").withInterval(decl.sourceInterval(2724, 2742)), this.range("਼", "਼").withInterval(decl.sourceInterval(2745, 2763)), this.range("ੁ", "ੂ").withInterval(decl.sourceInterval(2766, 2784)), this.range("ੇ", "ੈ").withInterval(decl.sourceInterval(2787, 2805)), this.range("ੋ", "੍").withInterval(decl.sourceInterval(2808, 2826)), this.range("ੰ", "ੱ").withInterval(decl.sourceInterval(2829, 2847)), this.range("ઁ", "ં").withInterval(decl.sourceInterval(2850, 2868)), this.range("઼", "઼").withInterval(decl.sourceInterval(2871, 2889)), this.range("ુ", "ૅ").withInterval(decl.sourceInterval(2892, 2910)), this.range("ે", "ૈ").withInterval(decl.sourceInterval(2913, 2931)), this.range("્", "્").withInterval(decl.sourceInterval(2934, 2952)), this.range("ଁ", "ଁ").withInterval(decl.sourceInterval(2955, 2973)), this.range("଼", "଼").withInterval(decl.sourceInterval(2976, 2994)), this.range("ି", "ି").withInterval(decl.sourceInterval(2997, 3015)), this.range("ୁ", "ୃ").withInterval(decl.sourceInterval(3018, 3036)), this.range("୍", "୍").withInterval(decl.sourceInterval(3039, 3057)), this.range("ୖ", "ୖ").withInterval(decl.sourceInterval(3060, 3078)), this.range("ஂ", "ஂ").withInterval(decl.sourceInterval(3081, 3099)), this.range("ீ", "ீ").withInterval(decl.sourceInterval(3102, 3120)), this.range("்", "்").withInterval(decl.sourceInterval(3123, 3141)), this.range("ా", "ీ").withInterval(decl.sourceInterval(3144, 3162)), this.range("ె", "ై").withInterval(decl.sourceInterval(3165, 3183)), this.range("ొ", "్").withInterval(decl.sourceInterval(3186, 3204)), this.range("ౕ", "ౖ").withInterval(decl.sourceInterval(3207, 3225)), this.range("ಿ", "ಿ").withInterval(decl.sourceInterval(3228, 3246)), this.range("ೆ", "ೆ").withInterval(decl.sourceInterval(3249, 3267)), this.range("ೌ", "್").withInterval(decl.sourceInterval(3270, 3288)), this.range("ു", "ൃ").withInterval(decl.sourceInterval(3291, 3309)), this.range("്", "്").withInterval(decl.sourceInterval(3312, 3330)), this.range("ั", "ั").withInterval(decl.sourceInterval(3333, 3351)), this.range("ิ", "ฺ").withInterval(decl.sourceInterval(3354, 3372)), this.range("็", "๎").withInterval(decl.sourceInterval(3375, 3393)), this.range("ັ", "ັ").withInterval(decl.sourceInterval(3396, 3414)), this.range("ິ", "ູ").withInterval(decl.sourceInterval(3417, 3435)), this.range("ົ", "ຼ").withInterval(decl.sourceInterval(3438, 3456)), this.range("່", "ໍ").withInterval(decl.sourceInterval(3459, 3477)), this.range("༘", "༙").withInterval(decl.sourceInterval(3480, 3498)), this.range("༵", "༵").withInterval(decl.sourceInterval(3501, 3519)), this.range("༷", "༷").withInterval(decl.sourceInterval(3522, 3540)), this.range("༹", "༹").withInterval(decl.sourceInterval(3543, 3561)), this.range("ཱ", "ཾ").withInterval(decl.sourceInterval(3564, 3582)), this.range("ྀ", "྄").withInterval(decl.sourceInterval(3585, 3603)), this.range("྆", "྇").withInterval(decl.sourceInterval(3606, 3624)), this.range("ྐ", "ྕ").withInterval(decl.sourceInterval(3627, 3645)), this.range("ྗ", "ྗ").withInterval(decl.sourceInterval(3648, 3666)), this.range("ྙ", "ྭ").withInterval(decl.sourceInterval(3669, 3687)), this.range("ྱ", "ྷ").withInterval(decl.sourceInterval(3690, 3708)), this.range("ྐྵ", "ྐྵ").withInterval(decl.sourceInterval(3711, 3729)), this.range("⃐", "⃜").withInterval(decl.sourceInterval(3732, 3750)), this.range("⃡", "⃡").withInterval(decl.sourceInterval(3753, 3771)), this.range("〪", "〯").withInterval(decl.sourceInterval(3774, 3792)), this.range("゙", "゚").withInterval(decl.sourceInterval(3795, 3813)), this.range("ﬞ", "ﬞ").withInterval(decl.sourceInterval(3816, 3834)), this.range("︠", "︣").withInterval(decl.sourceInterval(3837, 3855))).withInterval(decl.sourceInterval(2178, 3855)), "a Unicode combining mark")
    .define("unicodeConnectorPunctuation", [], this.alt(this.terminal("_").withInterval(decl.sourceInterval(3889, 3897)), this.range("‿", "⁀").withInterval(decl.sourceInterval(3900, 3918)), this.terminal("・").withInterval(decl.sourceInterval(3921, 3929)), this.range("︳", "︴").withInterval(decl.sourceInterval(3932, 3950)), this.range("﹍", "﹏").withInterval(decl.sourceInterval(3953, 3971)), this.terminal("＿").withInterval(decl.sourceInterval(3974, 3982)), this.terminal("･").withInterval(decl.sourceInterval(3985, 3993))).withInterval(decl.sourceInterval(3889, 3993)))
    .define("unicodeSpaceSeparator", [], this.alt(this.range(" ", "​").withInterval(decl.sourceInterval(4020, 4038)), this.terminal("　").withInterval(decl.sourceInterval(4041, 4049))).withInterval(decl.sourceInterval(4020, 4049)))
    .define("reservedWord", [], this.alt(this.app("keyword").withInterval(decl.sourceInterval(4068, 4075)), this.app("futureReservedWord").withInterval(decl.sourceInterval(4078, 4096)), this.app("nullLiteral").withInterval(decl.sourceInterval(4099, 4110)), this.app("booleanLiteral").withInterval(decl.sourceInterval(4113, 4127))).withInterval(decl.sourceInterval(4068, 4127)))
    .define("keyword", [], this.alt(this.app("break").withInterval(decl.sourceInterval(4280, 4285)), this.app("do").withInterval(decl.sourceInterval(4291, 4293)), this.app("instanceof").withInterval(decl.sourceInterval(4303, 4313)), this.app("typeof").withInterval(decl.sourceInterval(4316, 4322)), this.app("case").withInterval(decl.sourceInterval(4335, 4339)), this.app("else").withInterval(decl.sourceInterval(4346, 4350)), this.app("new").withInterval(decl.sourceInterval(4358, 4361)), this.app("var").withInterval(decl.sourceInterval(4371, 4374)), this.app("catch").withInterval(decl.sourceInterval(4387, 4392)), this.app("finally").withInterval(decl.sourceInterval(4398, 4405)), this.app("return").withInterval(decl.sourceInterval(4410, 4416)), this.app("void").withInterval(decl.sourceInterval(4423, 4427)), this.app("continue").withInterval(decl.sourceInterval(4440, 4448)), this.app("for").withInterval(decl.sourceInterval(4451, 4454)), this.app("switch").withInterval(decl.sourceInterval(4463, 4469)), this.app("while").withInterval(decl.sourceInterval(4476, 4481)), this.app("debugger").withInterval(decl.sourceInterval(4494, 4502)), this.app("function").withInterval(decl.sourceInterval(4505, 4513)), this.app("this").withInterval(decl.sourceInterval(4517, 4521)), this.app("with").withInterval(decl.sourceInterval(4530, 4534)), this.app("default").withInterval(decl.sourceInterval(4547, 4554)), this.app("if").withInterval(decl.sourceInterval(4558, 4560)), this.app("throw").withInterval(decl.sourceInterval(4570, 4575)), this.app("delete").withInterval(decl.sourceInterval(4588, 4594)), this.app("in").withInterval(decl.sourceInterval(4599, 4601)), this.app("try").withInterval(decl.sourceInterval(4611, 4614))).withInterval(decl.sourceInterval(4280, 4614)))
    .define("futureReservedWordLax", [], this.alt(this.app("class").withInterval(decl.sourceInterval(4642, 4647)), this.app("enum").withInterval(decl.sourceInterval(4651, 4655)), this.app("extends").withInterval(decl.sourceInterval(4659, 4666)), this.app("super").withInterval(decl.sourceInterval(4693, 4698)), this.app("const").withInterval(decl.sourceInterval(4702, 4707)), this.app("export").withInterval(decl.sourceInterval(4710, 4716)), this.app("import").withInterval(decl.sourceInterval(4743, 4749))).withInterval(decl.sourceInterval(4642, 4749)))
    .define("futureReservedWordStrict", [], this.alt(this.app("futureReservedWordLax").withInterval(decl.sourceInterval(4780, 4801)), this.app("implements").withInterval(decl.sourceInterval(4831, 4841)), this.app("let").withInterval(decl.sourceInterval(4844, 4847)), this.app("private").withInterval(decl.sourceInterval(4854, 4861)), this.app("public").withInterval(decl.sourceInterval(4866, 4872)), this.app("interface").withInterval(decl.sourceInterval(4902, 4911)), this.app("package").withInterval(decl.sourceInterval(4915, 4922)), this.app("protected").withInterval(decl.sourceInterval(4925, 4934)), this.app("static").withInterval(decl.sourceInterval(4937, 4943)), this.app("yield").withInterval(decl.sourceInterval(4973, 4978))).withInterval(decl.sourceInterval(4780, 4978)))
    .define("futureReservedWord", [], this.app("futureReservedWordStrict").withInterval(decl.sourceInterval(5003, 5027)))
    .define("literal", [], this.alt(this.app("nullLiteral").withInterval(decl.sourceInterval(5176, 5187)), this.app("booleanLiteral").withInterval(decl.sourceInterval(5190, 5204)), this.app("numericLiteral").withInterval(decl.sourceInterval(5207, 5221)), this.app("stringLiteral").withInterval(decl.sourceInterval(5234, 5247)), this.app("regularExpressionLiteral").withInterval(decl.sourceInterval(5250, 5274))).withInterval(decl.sourceInterval(5176, 5274)))
    .define("nullLiteral", [], this.seq(this.terminal("null").withInterval(decl.sourceInterval(5335, 5341)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(5343, 5357))).withInterval(decl.sourceInterval(5342, 5357))).withInterval(decl.sourceInterval(5335, 5357)))
    .define("booleanLiteral", [], this.seq(this.alt(this.terminal("true").withInterval(decl.sourceInterval(5378, 5384)), this.terminal("false").withInterval(decl.sourceInterval(5387, 5394))).withInterval(decl.sourceInterval(5378, 5394)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(5397, 5411))).withInterval(decl.sourceInterval(5396, 5411))).withInterval(decl.sourceInterval(5377, 5411)))
    .define("numericLiteral", [], this.alt(this.app("octalIntegerLiteral").withInterval(decl.sourceInterval(5746, 5765)), this.app("hexIntegerLiteral").withInterval(decl.sourceInterval(5768, 5785)), this.app("decimalLiteral").withInterval(decl.sourceInterval(5788, 5802))).withInterval(decl.sourceInterval(5746, 5802)))
    .define("decimalLiteral_bothParts", [], this.seq(this.app("decimalIntegerLiteral").withInterval(decl.sourceInterval(5823, 5844)), this.terminal(".").withInterval(decl.sourceInterval(5845, 5848)), this.star(this.app("decimalDigit").withInterval(decl.sourceInterval(5849, 5861))).withInterval(decl.sourceInterval(5849, 5862)), this.app("exponentPart").withInterval(decl.sourceInterval(5863, 5875))).withInterval(decl.sourceInterval(5823, 5875)))
    .define("decimalLiteral_decimalsOnly", [], this.seq(this.terminal(".").withInterval(decl.sourceInterval(5930, 5933)), this.plus(this.app("decimalDigit").withInterval(decl.sourceInterval(5934, 5946))).withInterval(decl.sourceInterval(5934, 5947)), this.app("exponentPart").withInterval(decl.sourceInterval(5948, 5960))).withInterval(decl.sourceInterval(5930, 5960)))
    .define("decimalLiteral_integerOnly", [], this.seq(this.app("decimalIntegerLiteral").withInterval(decl.sourceInterval(5996, 6017)), this.app("exponentPart").withInterval(decl.sourceInterval(6036, 6048))).withInterval(decl.sourceInterval(5996, 6048)))
    .define("decimalLiteral", [], this.alt(this.app("decimalLiteral_bothParts").withInterval(decl.sourceInterval(5823, 5875)), this.app("decimalLiteral_decimalsOnly").withInterval(decl.sourceInterval(5930, 5960)), this.app("decimalLiteral_integerOnly").withInterval(decl.sourceInterval(5996, 6048))).withInterval(decl.sourceInterval(5823, 6063)))
    .define("decimalIntegerLiteral_nonZero", [], this.seq(this.app("nonZeroDigit").withInterval(decl.sourceInterval(6091, 6103)), this.star(this.app("decimalDigit").withInterval(decl.sourceInterval(6104, 6116))).withInterval(decl.sourceInterval(6104, 6117))).withInterval(decl.sourceInterval(6091, 6117)))
    .define("decimalIntegerLiteral_zero", [], this.terminal("0").withInterval(decl.sourceInterval(6156, 6159)))
    .define("decimalIntegerLiteral", [], this.alt(this.app("decimalIntegerLiteral_nonZero").withInterval(decl.sourceInterval(6091, 6117)), this.app("decimalIntegerLiteral_zero").withInterval(decl.sourceInterval(6156, 6159))).withInterval(decl.sourceInterval(6091, 6191)))
    .define("decimalDigit", [], this.range("0", "9").withInterval(decl.sourceInterval(6209, 6217)))
    .define("nonZeroDigit", [], this.range("1", "9").withInterval(decl.sourceInterval(6235, 6243)))
    .define("exponentPart_present", [], this.seq(this.app("exponentIndicator").withInterval(decl.sourceInterval(6262, 6279)), this.app("signedInteger").withInterval(decl.sourceInterval(6280, 6293))).withInterval(decl.sourceInterval(6262, 6293)))
    .define("exponentPart_absent", [], this.seq().withInterval(decl.sourceInterval(6354, 6354)))
    .define("exponentPart", [], this.alt(this.app("exponentPart_present").withInterval(decl.sourceInterval(6262, 6293)), this.app("exponentPart_absent").withInterval(decl.sourceInterval(6354, 6354))).withInterval(decl.sourceInterval(6262, 6363)))
    .define("exponentIndicator", [], this.alt(this.terminal("e").withInterval(decl.sourceInterval(6386, 6389)), this.terminal("E").withInterval(decl.sourceInterval(6392, 6395))).withInterval(decl.sourceInterval(6386, 6395)))
    .define("signedInteger_positive", [], this.seq(this.terminal("+").withInterval(decl.sourceInterval(6414, 6417)), this.star(this.app("decimalDigit").withInterval(decl.sourceInterval(6418, 6430))).withInterval(decl.sourceInterval(6418, 6431))).withInterval(decl.sourceInterval(6414, 6431)))
    .define("signedInteger_negative", [], this.seq(this.terminal("-").withInterval(decl.sourceInterval(6462, 6465)), this.star(this.app("decimalDigit").withInterval(decl.sourceInterval(6466, 6478))).withInterval(decl.sourceInterval(6466, 6479))).withInterval(decl.sourceInterval(6462, 6479)))
    .define("signedInteger_noSign", [], this.plus(this.app("decimalDigit").withInterval(decl.sourceInterval(6514, 6526))).withInterval(decl.sourceInterval(6514, 6527)))
    .define("signedInteger", [], this.alt(this.app("signedInteger_positive").withInterval(decl.sourceInterval(6414, 6431)), this.app("signedInteger_negative").withInterval(decl.sourceInterval(6462, 6479)), this.app("signedInteger_noSign").withInterval(decl.sourceInterval(6514, 6527))).withInterval(decl.sourceInterval(6414, 6537)))
    .define("hexIntegerLiteral", [], this.alt(this.seq(this.terminal("0x").withInterval(decl.sourceInterval(6561, 6565)), this.plus(this.app("hexDigit").withInterval(decl.sourceInterval(6566, 6574))).withInterval(decl.sourceInterval(6566, 6575))).withInterval(decl.sourceInterval(6561, 6575)), this.seq(this.terminal("0X").withInterval(decl.sourceInterval(6598, 6602)), this.plus(this.app("hexDigit").withInterval(decl.sourceInterval(6603, 6611))).withInterval(decl.sourceInterval(6603, 6612))).withInterval(decl.sourceInterval(6598, 6612))).withInterval(decl.sourceInterval(6561, 6612)))
    .define("octalIntegerLiteral", [], this.seq(this.terminal("0").withInterval(decl.sourceInterval(6740, 6743)), this.plus(this.app("octalDigit").withInterval(decl.sourceInterval(6744, 6754))).withInterval(decl.sourceInterval(6744, 6755))).withInterval(decl.sourceInterval(6740, 6755)))
    .define("octalDigit", [], this.range("0", "7").withInterval(decl.sourceInterval(6772, 6780)))
    .define("stringLiteral", [], this.alt(this.seq(this.terminal("\"").withInterval(decl.sourceInterval(6877, 6881)), this.star(this.app("doubleStringCharacter").withInterval(decl.sourceInterval(6882, 6903))).withInterval(decl.sourceInterval(6882, 6904)), this.terminal("\"").withInterval(decl.sourceInterval(6905, 6909))).withInterval(decl.sourceInterval(6877, 6909)), this.seq(this.terminal("'").withInterval(decl.sourceInterval(6928, 6931)), this.star(this.app("singleStringCharacter").withInterval(decl.sourceInterval(6932, 6953))).withInterval(decl.sourceInterval(6932, 6954)), this.terminal("'").withInterval(decl.sourceInterval(6955, 6958))).withInterval(decl.sourceInterval(6928, 6958))).withInterval(decl.sourceInterval(6877, 6958)))
    .define("doubleStringCharacter_nonEscaped", [], this.seq(this.not(this.alt(this.terminal("\"").withInterval(decl.sourceInterval(6987, 6991)), this.terminal("\\").withInterval(decl.sourceInterval(6994, 6998)), this.app("lineTerminator").withInterval(decl.sourceInterval(7001, 7015))).withInterval(decl.sourceInterval(6987, 7015))).withInterval(decl.sourceInterval(6985, 7016)), this.app("sourceCharacter").withInterval(decl.sourceInterval(7017, 7032))).withInterval(decl.sourceInterval(6985, 7032)))
    .define("doubleStringCharacter_escaped", [], this.seq(this.terminal("\\").withInterval(decl.sourceInterval(7073, 7077)), this.app("escapeSequence").withInterval(decl.sourceInterval(7078, 7092))).withInterval(decl.sourceInterval(7073, 7092)))
    .define("doubleStringCharacter_lineContinuation", [], this.app("lineContinuation").withInterval(decl.sourceInterval(7158, 7174)))
    .define("doubleStringCharacter", [], this.alt(this.app("doubleStringCharacter_nonEscaped").withInterval(decl.sourceInterval(6985, 7032)), this.app("doubleStringCharacter_escaped").withInterval(decl.sourceInterval(7073, 7092)), this.app("doubleStringCharacter_lineContinuation").withInterval(decl.sourceInterval(7158, 7174))).withInterval(decl.sourceInterval(6985, 7225)))
    .define("singleStringCharacter_nonEscaped", [], this.seq(this.not(this.alt(this.terminal("'").withInterval(decl.sourceInterval(7254, 7257)), this.terminal("\\").withInterval(decl.sourceInterval(7260, 7264)), this.app("lineTerminator").withInterval(decl.sourceInterval(7267, 7281))).withInterval(decl.sourceInterval(7254, 7281))).withInterval(decl.sourceInterval(7252, 7282)), this.app("sourceCharacter").withInterval(decl.sourceInterval(7283, 7298))).withInterval(decl.sourceInterval(7252, 7298)))
    .define("singleStringCharacter_escaped", [], this.seq(this.terminal("\\").withInterval(decl.sourceInterval(7339, 7343)), this.app("escapeSequence").withInterval(decl.sourceInterval(7344, 7358))).withInterval(decl.sourceInterval(7339, 7358)))
    .define("singleStringCharacter_lineContinuation", [], this.app("lineContinuation").withInterval(decl.sourceInterval(7423, 7439)))
    .define("singleStringCharacter", [], this.alt(this.app("singleStringCharacter_nonEscaped").withInterval(decl.sourceInterval(7252, 7298)), this.app("singleStringCharacter_escaped").withInterval(decl.sourceInterval(7339, 7358)), this.app("singleStringCharacter_lineContinuation").withInterval(decl.sourceInterval(7423, 7439))).withInterval(decl.sourceInterval(7252, 7489)))
    .define("lineContinuation", [], this.seq(this.terminal("\\").withInterval(decl.sourceInterval(7511, 7515)), this.app("lineTerminatorSequence").withInterval(decl.sourceInterval(7516, 7538))).withInterval(decl.sourceInterval(7511, 7538)))
    .define("escapeSequence", [], this.alt(this.app("unicodeEscapeSequence").withInterval(decl.sourceInterval(7558, 7579)), this.app("hexEscapeSequence").withInterval(decl.sourceInterval(7599, 7616)), this.app("octalEscapeSequence").withInterval(decl.sourceInterval(7636, 7655)), this.app("characterEscapeSequence").withInterval(decl.sourceInterval(7675, 7698))).withInterval(decl.sourceInterval(7558, 7698)))
    .define("characterEscapeSequence", [], this.alt(this.app("singleEscapeCharacter").withInterval(decl.sourceInterval(7747, 7768)), this.app("nonEscapeCharacter").withInterval(decl.sourceInterval(7797, 7815))).withInterval(decl.sourceInterval(7747, 7815)))
    .define("singleEscapeCharacter", [], this.alt(this.terminal("'").withInterval(decl.sourceInterval(7842, 7845)), this.terminal("\"").withInterval(decl.sourceInterval(7848, 7852)), this.terminal("\\").withInterval(decl.sourceInterval(7855, 7859)), this.terminal("b").withInterval(decl.sourceInterval(7862, 7865)), this.terminal("f").withInterval(decl.sourceInterval(7868, 7871)), this.terminal("n").withInterval(decl.sourceInterval(7874, 7877)), this.terminal("r").withInterval(decl.sourceInterval(7880, 7883)), this.terminal("t").withInterval(decl.sourceInterval(7886, 7889)), this.terminal("v").withInterval(decl.sourceInterval(7892, 7895))).withInterval(decl.sourceInterval(7842, 7895)))
    .define("nonEscapeCharacter", [], this.seq(this.not(this.alt(this.app("escapeCharacter").withInterval(decl.sourceInterval(7921, 7936)), this.app("lineTerminator").withInterval(decl.sourceInterval(7939, 7953))).withInterval(decl.sourceInterval(7921, 7953))).withInterval(decl.sourceInterval(7919, 7954)), this.app("sourceCharacter").withInterval(decl.sourceInterval(7955, 7970))).withInterval(decl.sourceInterval(7919, 7970)))
    .define("escapeCharacter", [], this.alt(this.app("singleEscapeCharacter").withInterval(decl.sourceInterval(7991, 8012)), this.app("decimalDigit").withInterval(decl.sourceInterval(8015, 8027)), this.terminal("x").withInterval(decl.sourceInterval(8030, 8033)), this.terminal("u").withInterval(decl.sourceInterval(8036, 8039))).withInterval(decl.sourceInterval(7991, 8039)))
    .define("octalEscapeSequence_whole", [], this.seq(this.app("zeroToThree").withInterval(decl.sourceInterval(8064, 8075)), this.app("octalDigit").withInterval(decl.sourceInterval(8076, 8086)), this.app("octalDigit").withInterval(decl.sourceInterval(8087, 8097))).withInterval(decl.sourceInterval(8064, 8097)))
    .define("octalEscapeSequence_eightTimesfourToSeven", [], this.seq(this.app("fourToSeven").withInterval(decl.sourceInterval(8134, 8145)), this.app("octalDigit").withInterval(decl.sourceInterval(8146, 8156))).withInterval(decl.sourceInterval(8134, 8156)))
    .define("octalEscapeSequence_eightTimesZeroToThree", [], this.seq(this.app("zeroToThree").withInterval(decl.sourceInterval(8220, 8231)), this.app("octalDigit").withInterval(decl.sourceInterval(8232, 8242)), this.not(this.app("decimalDigit").withInterval(decl.sourceInterval(8244, 8256))).withInterval(decl.sourceInterval(8243, 8256))).withInterval(decl.sourceInterval(8220, 8256)))
    .define("octalEscapeSequence_octal", [], this.seq(this.app("octalDigit").withInterval(decl.sourceInterval(8306, 8316)), this.not(this.app("decimalDigit").withInterval(decl.sourceInterval(8318, 8330))).withInterval(decl.sourceInterval(8317, 8330))).withInterval(decl.sourceInterval(8306, 8330)))
    .define("octalEscapeSequence", [], this.alt(this.app("octalEscapeSequence_whole").withInterval(decl.sourceInterval(8064, 8097)), this.app("octalEscapeSequence_eightTimesfourToSeven").withInterval(decl.sourceInterval(8134, 8156)), this.app("octalEscapeSequence_eightTimesZeroToThree").withInterval(decl.sourceInterval(8220, 8256)), this.app("octalEscapeSequence_octal").withInterval(decl.sourceInterval(8306, 8330))).withInterval(decl.sourceInterval(8064, 8351)))
    .define("hexEscapeSequence", [], this.seq(this.terminal("x").withInterval(decl.sourceInterval(8374, 8377)), this.app("hexDigit").withInterval(decl.sourceInterval(8378, 8386)), this.app("hexDigit").withInterval(decl.sourceInterval(8387, 8395))).withInterval(decl.sourceInterval(8374, 8395)))
    .define("unicodeEscapeSequence", [], this.seq(this.terminal("u").withInterval(decl.sourceInterval(8422, 8425)), this.app("hexDigit").withInterval(decl.sourceInterval(8426, 8434)), this.app("hexDigit").withInterval(decl.sourceInterval(8435, 8443)), this.app("hexDigit").withInterval(decl.sourceInterval(8444, 8452)), this.app("hexDigit").withInterval(decl.sourceInterval(8453, 8461))).withInterval(decl.sourceInterval(8422, 8461)))
    .define("zeroToThree", [], this.range("0", "3").withInterval(decl.sourceInterval(8479, 8487)))
    .define("fourToSeven", [], this.range("4", "7").withInterval(decl.sourceInterval(8504, 8512)))
    .define("regularExpressionLiteral", [], this.seq(this.terminal("/").withInterval(decl.sourceInterval(8641, 8644)), this.app("regularExpressionBody").withInterval(decl.sourceInterval(8645, 8666)), this.terminal("/").withInterval(decl.sourceInterval(8667, 8670)), this.app("regularExpressionFlags").withInterval(decl.sourceInterval(8671, 8693))).withInterval(decl.sourceInterval(8641, 8693)))
    .define("regularExpressionBody", [], this.seq(this.app("regularExpressionFirstChar").withInterval(decl.sourceInterval(8720, 8746)), this.star(this.app("regularExpressionChar").withInterval(decl.sourceInterval(8747, 8768))).withInterval(decl.sourceInterval(8747, 8769))).withInterval(decl.sourceInterval(8720, 8769)))
    .define("regularExpressionFirstChar", [], this.alt(this.seq(this.not(this.alt(this.terminal("*").withInterval(decl.sourceInterval(8803, 8806)), this.terminal("\\").withInterval(decl.sourceInterval(8809, 8813)), this.terminal("/").withInterval(decl.sourceInterval(8816, 8819)), this.terminal("[").withInterval(decl.sourceInterval(8822, 8825))).withInterval(decl.sourceInterval(8803, 8825))).withInterval(decl.sourceInterval(8801, 8826)), this.app("regularExpressionNonTerminator").withInterval(decl.sourceInterval(8827, 8857))).withInterval(decl.sourceInterval(8801, 8857)), this.app("regularExpressionBackslashSequence").withInterval(decl.sourceInterval(8889, 8923)), this.app("regularExpressionClass").withInterval(decl.sourceInterval(8955, 8977))).withInterval(decl.sourceInterval(8801, 8977)))
    .define("regularExpressionChar", [], this.alt(this.seq(this.not(this.alt(this.terminal("\\").withInterval(decl.sourceInterval(9006, 9010)), this.terminal("/").withInterval(decl.sourceInterval(9013, 9016)), this.terminal("[").withInterval(decl.sourceInterval(9019, 9022))).withInterval(decl.sourceInterval(9006, 9022))).withInterval(decl.sourceInterval(9004, 9023)), this.app("regularExpressionNonTerminator").withInterval(decl.sourceInterval(9024, 9054))).withInterval(decl.sourceInterval(9004, 9054)), this.app("regularExpressionBackslashSequence").withInterval(decl.sourceInterval(9081, 9115)), this.app("regularExpressionClass").withInterval(decl.sourceInterval(9142, 9164))).withInterval(decl.sourceInterval(9004, 9164)))
    .define("regularExpressionBackslashSequence", [], this.seq(this.terminal("\\").withInterval(decl.sourceInterval(9204, 9208)), this.app("regularExpressionNonTerminator").withInterval(decl.sourceInterval(9209, 9239))).withInterval(decl.sourceInterval(9204, 9239)))
    .define("regularExpressionNonTerminator", [], this.seq(this.not(this.app("lineTerminator").withInterval(decl.sourceInterval(9277, 9291))).withInterval(decl.sourceInterval(9275, 9292)), this.app("sourceCharacter").withInterval(decl.sourceInterval(9293, 9308))).withInterval(decl.sourceInterval(9275, 9308)))
    .define("regularExpressionClass", [], this.seq(this.terminal("[").withInterval(decl.sourceInterval(9336, 9339)), this.star(this.app("regularExpressionClassChar").withInterval(decl.sourceInterval(9340, 9366))).withInterval(decl.sourceInterval(9340, 9367)), this.terminal("]").withInterval(decl.sourceInterval(9368, 9371))).withInterval(decl.sourceInterval(9336, 9371)))
    .define("regularExpressionClassChar", [], this.alt(this.seq(this.not(this.alt(this.terminal("]").withInterval(decl.sourceInterval(9405, 9408)), this.terminal("\\").withInterval(decl.sourceInterval(9411, 9415))).withInterval(decl.sourceInterval(9405, 9415))).withInterval(decl.sourceInterval(9403, 9416)), this.app("regularExpressionNonTerminator").withInterval(decl.sourceInterval(9417, 9447))).withInterval(decl.sourceInterval(9403, 9447)), this.app("regularExpressionBackslashSequence").withInterval(decl.sourceInterval(9479, 9513))).withInterval(decl.sourceInterval(9403, 9513)))
    .define("regularExpressionFlags", [], this.star(this.app("identifierPart").withInterval(decl.sourceInterval(9541, 9555))).withInterval(decl.sourceInterval(9541, 9556)))
    .define("multiLineCommentNoNL", [], this.seq(this.terminal("/*").withInterval(decl.sourceInterval(9647, 9651)), this.star(this.seq(this.not(this.alt(this.terminal("*/").withInterval(decl.sourceInterval(9655, 9659)), this.app("lineTerminator").withInterval(decl.sourceInterval(9662, 9676))).withInterval(decl.sourceInterval(9655, 9676))).withInterval(decl.sourceInterval(9653, 9677)), this.app("sourceCharacter").withInterval(decl.sourceInterval(9678, 9693))).withInterval(decl.sourceInterval(9653, 9693))).withInterval(decl.sourceInterval(9652, 9695)), this.terminal("*/").withInterval(decl.sourceInterval(9696, 9700))).withInterval(decl.sourceInterval(9647, 9700)))
    .define("spacesNoNL", [], this.star(this.alt(this.app("whitespace").withInterval(decl.sourceInterval(9819, 9829)), this.app("singleLineComment").withInterval(decl.sourceInterval(9832, 9849)), this.app("multiLineCommentNoNL").withInterval(decl.sourceInterval(9852, 9872))).withInterval(decl.sourceInterval(9819, 9872))).withInterval(decl.sourceInterval(9818, 9874)))
    .define("sc", [], this.alt(this.seq(this.star(this.app("space").withInterval(decl.sourceInterval(10238, 10243))).withInterval(decl.sourceInterval(10238, 10244)), this.alt(this.terminal(";").withInterval(decl.sourceInterval(10246, 10249)), this.app("end").withInterval(decl.sourceInterval(10252, 10255))).withInterval(decl.sourceInterval(10246, 10255))).withInterval(decl.sourceInterval(10238, 10256)), this.seq(this.app("spacesNoNL").withInterval(decl.sourceInterval(10264, 10274)), this.alt(this.app("lineTerminator").withInterval(decl.sourceInterval(10276, 10290)), this.seq(this.not(this.app("multiLineCommentNoNL").withInterval(decl.sourceInterval(10294, 10314))).withInterval(decl.sourceInterval(10293, 10314)), this.app("multiLineComment").withInterval(decl.sourceInterval(10315, 10331))).withInterval(decl.sourceInterval(10293, 10331)), this.la(this.terminal("}").withInterval(decl.sourceInterval(10335, 10338))).withInterval(decl.sourceInterval(10334, 10338))).withInterval(decl.sourceInterval(10276, 10338))).withInterval(decl.sourceInterval(10264, 10339))).withInterval(decl.sourceInterval(10238, 10339)))
    .define("break", [], this.seq(this.terminal("break").withInterval(decl.sourceInterval(10402, 10409)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(10411, 10425))).withInterval(decl.sourceInterval(10410, 10425))).withInterval(decl.sourceInterval(10402, 10425)))
    .define("do", [], this.seq(this.terminal("do").withInterval(decl.sourceInterval(10433, 10437)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(10439, 10453))).withInterval(decl.sourceInterval(10438, 10453))).withInterval(decl.sourceInterval(10433, 10453)))
    .define("instanceof", [], this.seq(this.terminal("instanceof").withInterval(decl.sourceInterval(10469, 10481)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(10483, 10497))).withInterval(decl.sourceInterval(10482, 10497))).withInterval(decl.sourceInterval(10469, 10497)))
    .define("typeof", [], this.seq(this.terminal("typeof").withInterval(decl.sourceInterval(10509, 10517)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(10519, 10533))).withInterval(decl.sourceInterval(10518, 10533))).withInterval(decl.sourceInterval(10509, 10533)))
    .define("case", [], this.seq(this.terminal("case").withInterval(decl.sourceInterval(10543, 10549)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(10551, 10565))).withInterval(decl.sourceInterval(10550, 10565))).withInterval(decl.sourceInterval(10543, 10565)))
    .define("else", [], this.seq(this.terminal("else").withInterval(decl.sourceInterval(10575, 10581)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(10583, 10597))).withInterval(decl.sourceInterval(10582, 10597))).withInterval(decl.sourceInterval(10575, 10597)))
    .define("new", [], this.seq(this.terminal("new").withInterval(decl.sourceInterval(10606, 10611)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(10613, 10627))).withInterval(decl.sourceInterval(10612, 10627))).withInterval(decl.sourceInterval(10606, 10627)))
    .define("var", [], this.seq(this.terminal("var").withInterval(decl.sourceInterval(10636, 10641)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(10643, 10657))).withInterval(decl.sourceInterval(10642, 10657))).withInterval(decl.sourceInterval(10636, 10657)))
    .define("catch", [], this.seq(this.terminal("catch").withInterval(decl.sourceInterval(10668, 10675)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(10677, 10691))).withInterval(decl.sourceInterval(10676, 10691))).withInterval(decl.sourceInterval(10668, 10691)))
    .define("finally", [], this.seq(this.terminal("finally").withInterval(decl.sourceInterval(10704, 10713)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(10715, 10729))).withInterval(decl.sourceInterval(10714, 10729))).withInterval(decl.sourceInterval(10704, 10729)))
    .define("return", [], this.seq(this.terminal("return").withInterval(decl.sourceInterval(10741, 10749)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(10751, 10765))).withInterval(decl.sourceInterval(10750, 10765))).withInterval(decl.sourceInterval(10741, 10765)))
    .define("void", [], this.seq(this.terminal("void").withInterval(decl.sourceInterval(10775, 10781)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(10783, 10797))).withInterval(decl.sourceInterval(10782, 10797))).withInterval(decl.sourceInterval(10775, 10797)))
    .define("continue", [], this.seq(this.terminal("continue").withInterval(decl.sourceInterval(10811, 10821)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(10823, 10837))).withInterval(decl.sourceInterval(10822, 10837))).withInterval(decl.sourceInterval(10811, 10837)))
    .define("for", [], this.seq(this.terminal("for").withInterval(decl.sourceInterval(10846, 10851)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(10853, 10867))).withInterval(decl.sourceInterval(10852, 10867))).withInterval(decl.sourceInterval(10846, 10867)))
    .define("switch", [], this.seq(this.terminal("switch").withInterval(decl.sourceInterval(10879, 10887)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(10889, 10903))).withInterval(decl.sourceInterval(10888, 10903))).withInterval(decl.sourceInterval(10879, 10903)))
    .define("while", [], this.seq(this.terminal("while").withInterval(decl.sourceInterval(10914, 10921)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(10923, 10937))).withInterval(decl.sourceInterval(10922, 10937))).withInterval(decl.sourceInterval(10914, 10937)))
    .define("debugger", [], this.seq(this.terminal("debugger").withInterval(decl.sourceInterval(10951, 10961)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(10963, 10977))).withInterval(decl.sourceInterval(10962, 10977))).withInterval(decl.sourceInterval(10951, 10977)))
    .define("function", [], this.seq(this.terminal("function").withInterval(decl.sourceInterval(10991, 11001)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11003, 11017))).withInterval(decl.sourceInterval(11002, 11017))).withInterval(decl.sourceInterval(10991, 11017)))
    .define("this", [], this.seq(this.terminal("this").withInterval(decl.sourceInterval(11027, 11033)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11035, 11049))).withInterval(decl.sourceInterval(11034, 11049))).withInterval(decl.sourceInterval(11027, 11049)))
    .define("with", [], this.seq(this.terminal("with").withInterval(decl.sourceInterval(11059, 11065)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11067, 11081))).withInterval(decl.sourceInterval(11066, 11081))).withInterval(decl.sourceInterval(11059, 11081)))
    .define("default", [], this.seq(this.terminal("default").withInterval(decl.sourceInterval(11094, 11103)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11105, 11119))).withInterval(decl.sourceInterval(11104, 11119))).withInterval(decl.sourceInterval(11094, 11119)))
    .define("if", [], this.seq(this.terminal("if").withInterval(decl.sourceInterval(11127, 11131)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11133, 11147))).withInterval(decl.sourceInterval(11132, 11147))).withInterval(decl.sourceInterval(11127, 11147)))
    .define("throw", [], this.seq(this.terminal("throw").withInterval(decl.sourceInterval(11158, 11165)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11167, 11181))).withInterval(decl.sourceInterval(11166, 11181))).withInterval(decl.sourceInterval(11158, 11181)))
    .define("delete", [], this.seq(this.terminal("delete").withInterval(decl.sourceInterval(11193, 11201)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11203, 11217))).withInterval(decl.sourceInterval(11202, 11217))).withInterval(decl.sourceInterval(11193, 11217)))
    .define("in", [], this.seq(this.terminal("in").withInterval(decl.sourceInterval(11225, 11229)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11231, 11245))).withInterval(decl.sourceInterval(11230, 11245))).withInterval(decl.sourceInterval(11225, 11245)))
    .define("try", [], this.seq(this.terminal("try").withInterval(decl.sourceInterval(11254, 11259)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11261, 11275))).withInterval(decl.sourceInterval(11260, 11275))).withInterval(decl.sourceInterval(11254, 11275)))
    .define("get", [], this.seq(this.terminal("get").withInterval(decl.sourceInterval(11284, 11289)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11291, 11305))).withInterval(decl.sourceInterval(11290, 11305))).withInterval(decl.sourceInterval(11284, 11305)))
    .define("set", [], this.seq(this.terminal("set").withInterval(decl.sourceInterval(11314, 11319)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11321, 11335))).withInterval(decl.sourceInterval(11320, 11335))).withInterval(decl.sourceInterval(11314, 11335)))
    .define("class", [], this.seq(this.terminal("class").withInterval(decl.sourceInterval(11346, 11353)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11355, 11369))).withInterval(decl.sourceInterval(11354, 11369))).withInterval(decl.sourceInterval(11346, 11369)))
    .define("enum", [], this.seq(this.terminal("enum").withInterval(decl.sourceInterval(11379, 11385)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11387, 11401))).withInterval(decl.sourceInterval(11386, 11401))).withInterval(decl.sourceInterval(11379, 11401)))
    .define("extends", [], this.seq(this.terminal("extends").withInterval(decl.sourceInterval(11414, 11423)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11425, 11439))).withInterval(decl.sourceInterval(11424, 11439))).withInterval(decl.sourceInterval(11414, 11439)))
    .define("super", [], this.seq(this.terminal("super").withInterval(decl.sourceInterval(11450, 11457)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11459, 11473))).withInterval(decl.sourceInterval(11458, 11473))).withInterval(decl.sourceInterval(11450, 11473)))
    .define("const", [], this.seq(this.terminal("const").withInterval(decl.sourceInterval(11484, 11491)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11493, 11507))).withInterval(decl.sourceInterval(11492, 11507))).withInterval(decl.sourceInterval(11484, 11507)))
    .define("export", [], this.seq(this.terminal("export").withInterval(decl.sourceInterval(11519, 11527)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11529, 11543))).withInterval(decl.sourceInterval(11528, 11543))).withInterval(decl.sourceInterval(11519, 11543)))
    .define("import", [], this.seq(this.terminal("import").withInterval(decl.sourceInterval(11555, 11563)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11565, 11579))).withInterval(decl.sourceInterval(11564, 11579))).withInterval(decl.sourceInterval(11555, 11579)))
    .define("implements", [], this.seq(this.terminal("implements").withInterval(decl.sourceInterval(11595, 11607)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11609, 11623))).withInterval(decl.sourceInterval(11608, 11623))).withInterval(decl.sourceInterval(11595, 11623)))
    .define("let", [], this.seq(this.terminal("let").withInterval(decl.sourceInterval(11632, 11637)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11639, 11653))).withInterval(decl.sourceInterval(11638, 11653))).withInterval(decl.sourceInterval(11632, 11653)))
    .define("private", [], this.seq(this.terminal("private").withInterval(decl.sourceInterval(11666, 11675)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11677, 11691))).withInterval(decl.sourceInterval(11676, 11691))).withInterval(decl.sourceInterval(11666, 11691)))
    .define("public", [], this.seq(this.terminal("public").withInterval(decl.sourceInterval(11703, 11711)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11713, 11727))).withInterval(decl.sourceInterval(11712, 11727))).withInterval(decl.sourceInterval(11703, 11727)))
    .define("interface", [], this.seq(this.terminal("interface").withInterval(decl.sourceInterval(11742, 11753)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11755, 11769))).withInterval(decl.sourceInterval(11754, 11769))).withInterval(decl.sourceInterval(11742, 11769)))
    .define("package", [], this.seq(this.terminal("package").withInterval(decl.sourceInterval(11782, 11791)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11793, 11807))).withInterval(decl.sourceInterval(11792, 11807))).withInterval(decl.sourceInterval(11782, 11807)))
    .define("protected", [], this.seq(this.terminal("protected").withInterval(decl.sourceInterval(11822, 11833)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11835, 11849))).withInterval(decl.sourceInterval(11834, 11849))).withInterval(decl.sourceInterval(11822, 11849)))
    .define("static", [], this.seq(this.terminal("static").withInterval(decl.sourceInterval(11861, 11869)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11871, 11885))).withInterval(decl.sourceInterval(11870, 11885))).withInterval(decl.sourceInterval(11861, 11885)))
    .define("yield", [], this.seq(this.terminal("yield").withInterval(decl.sourceInterval(11896, 11903)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11905, 11919))).withInterval(decl.sourceInterval(11904, 11919))).withInterval(decl.sourceInterval(11896, 11919)))
    .define("noIn", [], this.not(this.app("in").withInterval(decl.sourceInterval(11960, 11962))).withInterval(decl.sourceInterval(11959, 11962)))
    .define("withIn", [], this.seq().withInterval(decl.sourceInterval(12055, 12055)))
    .define("PrimaryExpression_parenExpr", [], this.seq(this.terminal("(").withInterval(decl.sourceInterval(12632, 12635)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(12647, 12653))]).withInterval(decl.sourceInterval(12636, 12654)), this.terminal(")").withInterval(decl.sourceInterval(12655, 12658))).withInterval(decl.sourceInterval(12632, 12658)))
    .define("PrimaryExpression", [], this.alt(this.app("this").withInterval(decl.sourceInterval(12075, 12079)), this.app("identifier").withInterval(decl.sourceInterval(12102, 12112)), this.app("literal").withInterval(decl.sourceInterval(12135, 12142)), this.app("ArrayLiteral").withInterval(decl.sourceInterval(12561, 12573)), this.app("ObjectLiteral").withInterval(decl.sourceInterval(12596, 12609)), this.app("PrimaryExpression_parenExpr").withInterval(decl.sourceInterval(12632, 12658))).withInterval(decl.sourceInterval(12075, 12672)))
    .define("ArrayLiteral", [], this.seq(this.terminal("[").withInterval(decl.sourceInterval(12691, 12694)), this.app("ListOf", [this.app("AssignmentExpressionOrElision").withInterval(decl.sourceInterval(12702, 12731)), this.terminal(",").withInterval(decl.sourceInterval(12733, 12736))]).withInterval(decl.sourceInterval(12695, 12737)), this.terminal("]").withInterval(decl.sourceInterval(12738, 12741))).withInterval(decl.sourceInterval(12691, 12741)))
    .define("AssignmentExpressionOrElision_elision", [], this.seq().withInterval(decl.sourceInterval(12861, 12861)))
    .define("AssignmentExpressionOrElision", [], this.alt(this.app("AssignmentExpression", [this.app("withIn").withInterval(decl.sourceInterval(12797, 12803))]).withInterval(decl.sourceInterval(12776, 12804)), this.app("AssignmentExpressionOrElision_elision").withInterval(decl.sourceInterval(12861, 12861))).withInterval(decl.sourceInterval(12776, 12871)))
    .define("ObjectLiteral_noTrailingComma", [], this.seq(this.terminal("{").withInterval(decl.sourceInterval(12891, 12894)), this.app("ListOf", [this.app("PropertyAssignment").withInterval(decl.sourceInterval(12902, 12920)), this.terminal(",").withInterval(decl.sourceInterval(12922, 12925))]).withInterval(decl.sourceInterval(12895, 12926)), this.terminal("}").withInterval(decl.sourceInterval(12927, 12930))).withInterval(decl.sourceInterval(12891, 12930)))
    .define("ObjectLiteral_trailingComma", [], this.seq(this.terminal("{").withInterval(decl.sourceInterval(12981, 12984)), this.app("NonemptyListOf", [this.app("PropertyAssignment").withInterval(decl.sourceInterval(13000, 13018)), this.terminal(",").withInterval(decl.sourceInterval(13020, 13023))]).withInterval(decl.sourceInterval(12985, 13024)), this.terminal(",").withInterval(decl.sourceInterval(13025, 13028)), this.terminal("}").withInterval(decl.sourceInterval(13029, 13032))).withInterval(decl.sourceInterval(12981, 13032)))
    .define("ObjectLiteral", [], this.alt(this.app("ObjectLiteral_noTrailingComma").withInterval(decl.sourceInterval(12891, 12930)), this.app("ObjectLiteral_trailingComma").withInterval(decl.sourceInterval(12981, 13032))).withInterval(decl.sourceInterval(12891, 13050)))
    .define("PropertyAssignment_getter", [], this.seq(this.app("get").withInterval(decl.sourceInterval(13075, 13078)), this.app("PropertyName").withInterval(decl.sourceInterval(13079, 13091)), this.terminal("(").withInterval(decl.sourceInterval(13092, 13095)), this.terminal(")").withInterval(decl.sourceInterval(13096, 13099)), this.terminal("{").withInterval(decl.sourceInterval(13100, 13103)), this.app("FunctionBody").withInterval(decl.sourceInterval(13104, 13116)), this.terminal("}").withInterval(decl.sourceInterval(13117, 13120))).withInterval(decl.sourceInterval(13075, 13120)))
    .define("PropertyAssignment_setter", [], this.seq(this.app("set").withInterval(decl.sourceInterval(13171, 13174)), this.app("PropertyName").withInterval(decl.sourceInterval(13175, 13187)), this.terminal("(").withInterval(decl.sourceInterval(13188, 13191)), this.app("FormalParameter").withInterval(decl.sourceInterval(13192, 13207)), this.terminal(")").withInterval(decl.sourceInterval(13208, 13211)), this.terminal("{").withInterval(decl.sourceInterval(13212, 13215)), this.app("FunctionBody").withInterval(decl.sourceInterval(13216, 13228)), this.terminal("}").withInterval(decl.sourceInterval(13229, 13232))).withInterval(decl.sourceInterval(13171, 13232)))
    .define("PropertyAssignment_simple", [], this.seq(this.app("PropertyName").withInterval(decl.sourceInterval(13267, 13279)), this.terminal(":").withInterval(decl.sourceInterval(13280, 13283)), this.app("AssignmentExpression", [this.app("withIn").withInterval(decl.sourceInterval(13305, 13311))]).withInterval(decl.sourceInterval(13284, 13312))).withInterval(decl.sourceInterval(13267, 13312)))
    .define("PropertyAssignment", [], this.alt(this.app("PropertyAssignment_getter").withInterval(decl.sourceInterval(13075, 13120)), this.app("PropertyAssignment_setter").withInterval(decl.sourceInterval(13171, 13232)), this.app("PropertyAssignment_simple").withInterval(decl.sourceInterval(13267, 13312))).withInterval(decl.sourceInterval(13075, 13339)))
    .define("PropertyName", [], this.alt(this.app("identifierName").withInterval(decl.sourceInterval(13358, 13372)), this.app("stringLiteral").withInterval(decl.sourceInterval(13390, 13403)), this.app("numericLiteral").withInterval(decl.sourceInterval(13421, 13435))).withInterval(decl.sourceInterval(13358, 13435)))
    .define("MemberExpression_arrayRefExp", [], this.seq(this.app("MemberExpression").withInterval(decl.sourceInterval(13458, 13474)), this.terminal("[").withInterval(decl.sourceInterval(13475, 13478)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(13490, 13496))]).withInterval(decl.sourceInterval(13479, 13497)), this.terminal("]").withInterval(decl.sourceInterval(13498, 13501))).withInterval(decl.sourceInterval(13458, 13501)))
    .define("MemberExpression_propRefExp", [], this.seq(this.app("MemberExpression").withInterval(decl.sourceInterval(13539, 13555)), this.terminal(".").withInterval(decl.sourceInterval(13556, 13559)), this.app("identifierName").withInterval(decl.sourceInterval(13560, 13574))).withInterval(decl.sourceInterval(13539, 13574)))
    .define("MemberExpression_newExp", [], this.seq(this.app("new").withInterval(decl.sourceInterval(13611, 13614)), this.app("MemberExpression").withInterval(decl.sourceInterval(13615, 13631)), this.app("Arguments").withInterval(decl.sourceInterval(13632, 13641))).withInterval(decl.sourceInterval(13611, 13641)))
    .define("MemberExpression", [], this.alt(this.app("MemberExpression_arrayRefExp").withInterval(decl.sourceInterval(13458, 13501)), this.app("MemberExpression_propRefExp").withInterval(decl.sourceInterval(13539, 13574)), this.app("MemberExpression_newExp").withInterval(decl.sourceInterval(13611, 13641)), this.app("FunctionExpression").withInterval(decl.sourceInterval(13679, 13697)), this.app("PrimaryExpression").withInterval(decl.sourceInterval(13719, 13736))).withInterval(decl.sourceInterval(13458, 13736)))
    .define("NewExpression_newExp", [], this.seq(this.app("new").withInterval(decl.sourceInterval(13791, 13794)), this.app("NewExpression").withInterval(decl.sourceInterval(13795, 13808))).withInterval(decl.sourceInterval(13791, 13808)))
    .define("NewExpression", [], this.alt(this.app("MemberExpression").withInterval(decl.sourceInterval(13756, 13772)), this.app("NewExpression_newExp").withInterval(decl.sourceInterval(13791, 13808))).withInterval(decl.sourceInterval(13756, 13818)))
    .define("CallExpression_arrayRefExp", [], this.seq(this.app("CallExpression").withInterval(decl.sourceInterval(13839, 13853)), this.terminal("[").withInterval(decl.sourceInterval(13854, 13857)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(13869, 13875))]).withInterval(decl.sourceInterval(13858, 13876)), this.terminal("]").withInterval(decl.sourceInterval(13877, 13880))).withInterval(decl.sourceInterval(13839, 13880)))
    .define("CallExpression_propRefExp", [], this.seq(this.app("CallExpression").withInterval(decl.sourceInterval(13916, 13930)), this.terminal(".").withInterval(decl.sourceInterval(13931, 13934)), this.app("identifierName").withInterval(decl.sourceInterval(13935, 13949))).withInterval(decl.sourceInterval(13916, 13949)))
    .define("CallExpression_callExpExp", [], this.seq(this.app("CallExpression").withInterval(decl.sourceInterval(13984, 13998)), this.app("Arguments").withInterval(decl.sourceInterval(13999, 14008))).withInterval(decl.sourceInterval(13984, 14008)))
    .define("CallExpression_memberExpExp", [], this.seq(this.app("MemberExpression").withInterval(decl.sourceInterval(14052, 14068)), this.app("Arguments").withInterval(decl.sourceInterval(14069, 14078))).withInterval(decl.sourceInterval(14052, 14078)))
    .define("CallExpression", [], this.alt(this.app("CallExpression_arrayRefExp").withInterval(decl.sourceInterval(13839, 13880)), this.app("CallExpression_propRefExp").withInterval(decl.sourceInterval(13916, 13949)), this.app("CallExpression_callExpExp").withInterval(decl.sourceInterval(13984, 14008)), this.app("CallExpression_memberExpExp").withInterval(decl.sourceInterval(14052, 14078))).withInterval(decl.sourceInterval(13839, 14102)))
    .define("Arguments", [], this.seq(this.terminal("(").withInterval(decl.sourceInterval(14118, 14121)), this.app("ListOf", [this.app("AssignmentExpression", [this.app("withIn").withInterval(decl.sourceInterval(14150, 14156))]).withInterval(decl.sourceInterval(14129, 14157)), this.terminal(",").withInterval(decl.sourceInterval(14159, 14162))]).withInterval(decl.sourceInterval(14122, 14163)), this.terminal(")").withInterval(decl.sourceInterval(14164, 14167))).withInterval(decl.sourceInterval(14118, 14167)))
    .define("LeftHandSideExpression", [], this.alt(this.app("CallExpression").withInterval(decl.sourceInterval(14196, 14210)), this.app("NewExpression").withInterval(decl.sourceInterval(14238, 14251))).withInterval(decl.sourceInterval(14196, 14251)))
    .define("PostfixExpression_postIncrement", [], this.seq(this.app("LeftHandSideExpression").withInterval(decl.sourceInterval(14275, 14297)), this.lex(this.seq(this.app("spacesNoNL").withInterval(decl.sourceInterval(14300, 14310)), this.terminal("++").withInterval(decl.sourceInterval(14311, 14315))).withInterval(decl.sourceInterval(14300, 14315))).withInterval(decl.sourceInterval(14298, 14316))).withInterval(decl.sourceInterval(14275, 14316)))
    .define("PostfixExpression_postDecrement", [], this.seq(this.app("LeftHandSideExpression").withInterval(decl.sourceInterval(14357, 14379)), this.lex(this.seq(this.app("spacesNoNL").withInterval(decl.sourceInterval(14382, 14392)), this.terminal("--").withInterval(decl.sourceInterval(14393, 14397))).withInterval(decl.sourceInterval(14382, 14397))).withInterval(decl.sourceInterval(14380, 14398))).withInterval(decl.sourceInterval(14357, 14398)))
    .define("PostfixExpression", [], this.alt(this.app("PostfixExpression_postIncrement").withInterval(decl.sourceInterval(14275, 14316)), this.app("PostfixExpression_postDecrement").withInterval(decl.sourceInterval(14357, 14398)), this.app("LeftHandSideExpression").withInterval(decl.sourceInterval(14439, 14461))).withInterval(decl.sourceInterval(14275, 14461)))
    .define("UnaryExpression_deleteExp", [], this.seq(this.app("delete").withInterval(decl.sourceInterval(14483, 14489)), this.app("UnaryExpression").withInterval(decl.sourceInterval(14490, 14505))).withInterval(decl.sourceInterval(14483, 14505)))
    .define("UnaryExpression_voidExp", [], this.seq(this.app("void").withInterval(decl.sourceInterval(14540, 14544)), this.app("UnaryExpression").withInterval(decl.sourceInterval(14547, 14562))).withInterval(decl.sourceInterval(14540, 14562)))
    .define("UnaryExpression_typeofExp", [], this.seq(this.app("typeof").withInterval(decl.sourceInterval(14595, 14601)), this.app("UnaryExpression").withInterval(decl.sourceInterval(14602, 14617))).withInterval(decl.sourceInterval(14595, 14617)))
    .define("UnaryExpression_preIncrement", [], this.seq(this.terminal("++").withInterval(decl.sourceInterval(14652, 14656)), this.app("UnaryExpression").withInterval(decl.sourceInterval(14659, 14674))).withInterval(decl.sourceInterval(14652, 14674)))
    .define("UnaryExpression_preDecrement", [], this.seq(this.terminal("--").withInterval(decl.sourceInterval(14712, 14716)), this.app("UnaryExpression").withInterval(decl.sourceInterval(14719, 14734))).withInterval(decl.sourceInterval(14712, 14734)))
    .define("UnaryExpression_unaryPlus", [], this.seq(this.terminal("+").withInterval(decl.sourceInterval(14772, 14775)), this.app("UnaryExpression").withInterval(decl.sourceInterval(14779, 14794))).withInterval(decl.sourceInterval(14772, 14794)))
    .define("UnaryExpression_unaryMinus", [], this.seq(this.terminal("-").withInterval(decl.sourceInterval(14829, 14832)), this.app("UnaryExpression").withInterval(decl.sourceInterval(14836, 14851))).withInterval(decl.sourceInterval(14829, 14851)))
    .define("UnaryExpression_bnot", [], this.seq(this.terminal("~").withInterval(decl.sourceInterval(14887, 14890)), this.app("UnaryExpression").withInterval(decl.sourceInterval(14894, 14909))).withInterval(decl.sourceInterval(14887, 14909)))
    .define("UnaryExpression_lnot", [], this.seq(this.terminal("!").withInterval(decl.sourceInterval(14939, 14942)), this.app("UnaryExpression").withInterval(decl.sourceInterval(14946, 14961))).withInterval(decl.sourceInterval(14939, 14961)))
    .define("UnaryExpression", [], this.alt(this.app("UnaryExpression_deleteExp").withInterval(decl.sourceInterval(14483, 14505)), this.app("UnaryExpression_voidExp").withInterval(decl.sourceInterval(14540, 14562)), this.app("UnaryExpression_typeofExp").withInterval(decl.sourceInterval(14595, 14617)), this.app("UnaryExpression_preIncrement").withInterval(decl.sourceInterval(14652, 14674)), this.app("UnaryExpression_preDecrement").withInterval(decl.sourceInterval(14712, 14734)), this.app("UnaryExpression_unaryPlus").withInterval(decl.sourceInterval(14772, 14794)), this.app("UnaryExpression_unaryMinus").withInterval(decl.sourceInterval(14829, 14851)), this.app("UnaryExpression_bnot").withInterval(decl.sourceInterval(14887, 14909)), this.app("UnaryExpression_lnot").withInterval(decl.sourceInterval(14939, 14961)), this.app("PostfixExpression").withInterval(decl.sourceInterval(14991, 15008))).withInterval(decl.sourceInterval(14483, 15008)))
    .define("MultiplicativeExpression_mul", [], this.seq(this.app("MultiplicativeExpression").withInterval(decl.sourceInterval(15039, 15063)), this.terminal("*").withInterval(decl.sourceInterval(15064, 15067)), this.app("UnaryExpression").withInterval(decl.sourceInterval(15068, 15083))).withInterval(decl.sourceInterval(15039, 15083)))
    .define("MultiplicativeExpression_div", [], this.seq(this.app("MultiplicativeExpression").withInterval(decl.sourceInterval(15120, 15144)), this.terminal("/").withInterval(decl.sourceInterval(15145, 15148)), this.app("UnaryExpression").withInterval(decl.sourceInterval(15149, 15164))).withInterval(decl.sourceInterval(15120, 15164)))
    .define("MultiplicativeExpression_mod", [], this.seq(this.app("MultiplicativeExpression").withInterval(decl.sourceInterval(15201, 15225)), this.terminal("%").withInterval(decl.sourceInterval(15226, 15229)), this.app("UnaryExpression").withInterval(decl.sourceInterval(15230, 15245))).withInterval(decl.sourceInterval(15201, 15245)))
    .define("MultiplicativeExpression", [], this.alt(this.app("MultiplicativeExpression_mul").withInterval(decl.sourceInterval(15039, 15083)), this.app("MultiplicativeExpression_div").withInterval(decl.sourceInterval(15120, 15164)), this.app("MultiplicativeExpression_mod").withInterval(decl.sourceInterval(15201, 15245)), this.app("UnaryExpression").withInterval(decl.sourceInterval(15282, 15297))).withInterval(decl.sourceInterval(15039, 15297)))
    .define("AdditiveExpression_add", [], this.seq(this.app("AdditiveExpression").withInterval(decl.sourceInterval(15322, 15340)), this.terminal("+").withInterval(decl.sourceInterval(15341, 15344)), this.app("MultiplicativeExpression").withInterval(decl.sourceInterval(15345, 15369))).withInterval(decl.sourceInterval(15322, 15369)))
    .define("AdditiveExpression_sub", [], this.seq(this.app("AdditiveExpression").withInterval(decl.sourceInterval(15400, 15418)), this.terminal("-").withInterval(decl.sourceInterval(15419, 15422)), this.app("MultiplicativeExpression").withInterval(decl.sourceInterval(15423, 15447))).withInterval(decl.sourceInterval(15400, 15447)))
    .define("AdditiveExpression", [], this.alt(this.app("AdditiveExpression_add").withInterval(decl.sourceInterval(15322, 15369)), this.app("AdditiveExpression_sub").withInterval(decl.sourceInterval(15400, 15447)), this.app("MultiplicativeExpression").withInterval(decl.sourceInterval(15478, 15502))).withInterval(decl.sourceInterval(15322, 15502)))
    .define("ShiftExpression_lsl", [], this.seq(this.app("ShiftExpression").withInterval(decl.sourceInterval(15524, 15539)), this.terminal("<<").withInterval(decl.sourceInterval(15540, 15544)), this.app("AdditiveExpression").withInterval(decl.sourceInterval(15545, 15563))).withInterval(decl.sourceInterval(15524, 15563)))
    .define("ShiftExpression_lsr", [], this.seq(this.app("ShiftExpression").withInterval(decl.sourceInterval(15592, 15607)), this.terminal(">>>").withInterval(decl.sourceInterval(15608, 15613)), this.app("AdditiveExpression").withInterval(decl.sourceInterval(15614, 15632))).withInterval(decl.sourceInterval(15592, 15632)))
    .define("ShiftExpression_asr", [], this.seq(this.app("ShiftExpression").withInterval(decl.sourceInterval(15660, 15675)), this.terminal(">>").withInterval(decl.sourceInterval(15676, 15680)), this.app("AdditiveExpression").withInterval(decl.sourceInterval(15681, 15699))).withInterval(decl.sourceInterval(15660, 15699)))
    .define("ShiftExpression", [], this.alt(this.app("ShiftExpression_lsl").withInterval(decl.sourceInterval(15524, 15563)), this.app("ShiftExpression_lsr").withInterval(decl.sourceInterval(15592, 15632)), this.app("ShiftExpression_asr").withInterval(decl.sourceInterval(15660, 15699)), this.app("AdditiveExpression").withInterval(decl.sourceInterval(15728, 15746))).withInterval(decl.sourceInterval(15524, 15746)))
    .define("RelationalExpression_lt", ["guardIn"], this.seq(this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(15786, 15815)), this.terminal("<").withInterval(decl.sourceInterval(15816, 15819)), this.app("ShiftExpression").withInterval(decl.sourceInterval(15820, 15835))).withInterval(decl.sourceInterval(15786, 15835)))
    .define("RelationalExpression_gt", ["guardIn"], this.seq(this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(15858, 15887)), this.terminal(">").withInterval(decl.sourceInterval(15888, 15891)), this.app("ShiftExpression").withInterval(decl.sourceInterval(15892, 15907))).withInterval(decl.sourceInterval(15858, 15907)))
    .define("RelationalExpression_le", ["guardIn"], this.seq(this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(15930, 15959)), this.terminal("<=").withInterval(decl.sourceInterval(15960, 15964)), this.app("ShiftExpression").withInterval(decl.sourceInterval(15965, 15980))).withInterval(decl.sourceInterval(15930, 15980)))
    .define("RelationalExpression_ge", ["guardIn"], this.seq(this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(16002, 16031)), this.terminal(">=").withInterval(decl.sourceInterval(16032, 16036)), this.app("ShiftExpression").withInterval(decl.sourceInterval(16037, 16052))).withInterval(decl.sourceInterval(16002, 16052)))
    .define("RelationalExpression_instanceOfExp", ["guardIn"], this.seq(this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(16074, 16103)), this.terminal("instanceof").withInterval(decl.sourceInterval(16104, 16116)), this.app("ShiftExpression").withInterval(decl.sourceInterval(16117, 16132))).withInterval(decl.sourceInterval(16074, 16132)))
    .define("RelationalExpression_inExp", ["guardIn"], this.seq(this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(16157, 16186)), this.param(0), this.terminal("in").withInterval(decl.sourceInterval(16195, 16199)), this.app("ShiftExpression").withInterval(decl.sourceInterval(16200, 16215))).withInterval(decl.sourceInterval(16157, 16215)))
    .define("RelationalExpression", ["guardIn"], this.alt(this.app("RelationalExpression_lt", [this.param(0)]).withInterval(decl.sourceInterval(15786, 15835)), this.app("RelationalExpression_gt", [this.param(0)]).withInterval(decl.sourceInterval(15858, 15907)), this.app("RelationalExpression_le", [this.param(0)]).withInterval(decl.sourceInterval(15930, 15980)), this.app("RelationalExpression_ge", [this.param(0)]).withInterval(decl.sourceInterval(16002, 16052)), this.app("RelationalExpression_instanceOfExp", [this.param(0)]).withInterval(decl.sourceInterval(16074, 16132)), this.app("RelationalExpression_inExp", [this.param(0)]).withInterval(decl.sourceInterval(16157, 16215)), this.app("ShiftExpression").withInterval(decl.sourceInterval(16232, 16247))).withInterval(decl.sourceInterval(15786, 16247)))
    .define("EqualityExpression_equal", ["guardIn"], this.seq(this.app("EqualityExpression", [this.param(0)]).withInterval(decl.sourceInterval(16285, 16312)), this.terminal("==").withInterval(decl.sourceInterval(16313, 16317)), this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(16318, 16347))).withInterval(decl.sourceInterval(16285, 16347)))
    .define("EqualityExpression_notEqual", ["guardIn"], this.seq(this.app("EqualityExpression", [this.param(0)]).withInterval(decl.sourceInterval(16364, 16391)), this.terminal("!=").withInterval(decl.sourceInterval(16392, 16396)), this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(16397, 16426))).withInterval(decl.sourceInterval(16364, 16426)))
    .define("EqualityExpression_eq", ["guardIn"], this.seq(this.app("EqualityExpression", [this.param(0)]).withInterval(decl.sourceInterval(16446, 16473)), this.terminal("===").withInterval(decl.sourceInterval(16474, 16479)), this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(16480, 16509))).withInterval(decl.sourceInterval(16446, 16509)))
    .define("EqualityExpression_notEq", ["guardIn"], this.seq(this.app("EqualityExpression", [this.param(0)]).withInterval(decl.sourceInterval(16522, 16549)), this.terminal("!==").withInterval(decl.sourceInterval(16550, 16555)), this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(16556, 16585))).withInterval(decl.sourceInterval(16522, 16585)))
    .define("EqualityExpression", ["guardIn"], this.alt(this.app("EqualityExpression_equal", [this.param(0)]).withInterval(decl.sourceInterval(16285, 16347)), this.app("EqualityExpression_notEqual", [this.param(0)]).withInterval(decl.sourceInterval(16364, 16426)), this.app("EqualityExpression_eq", [this.param(0)]).withInterval(decl.sourceInterval(16446, 16509)), this.app("EqualityExpression_notEq", [this.param(0)]).withInterval(decl.sourceInterval(16522, 16585)), this.app("RelationalExpression", [this.param(0)]).withInterval(decl.sourceInterval(16601, 16630))).withInterval(decl.sourceInterval(16285, 16630)))
    .define("BitwiseANDExpression_band", ["guardIn"], this.seq(this.app("BitwiseANDExpression", [this.param(0)]).withInterval(decl.sourceInterval(16670, 16699)), this.terminal("&").withInterval(decl.sourceInterval(16700, 16703)), this.app("EqualityExpression", [this.param(0)]).withInterval(decl.sourceInterval(16704, 16731))).withInterval(decl.sourceInterval(16670, 16731)))
    .define("BitwiseANDExpression", ["guardIn"], this.alt(this.app("BitwiseANDExpression_band", [this.param(0)]).withInterval(decl.sourceInterval(16670, 16731)), this.app("EqualityExpression", [this.param(0)]).withInterval(decl.sourceInterval(16746, 16773))).withInterval(decl.sourceInterval(16670, 16773)))
    .define("BitwiseXORExpression_bxor", ["guardIn"], this.seq(this.app("BitwiseXORExpression", [this.param(0)]).withInterval(decl.sourceInterval(16813, 16842)), this.terminal("^").withInterval(decl.sourceInterval(16843, 16846)), this.app("BitwiseANDExpression", [this.param(0)]).withInterval(decl.sourceInterval(16847, 16876))).withInterval(decl.sourceInterval(16813, 16876)))
    .define("BitwiseXORExpression", ["guardIn"], this.alt(this.app("BitwiseXORExpression_bxor", [this.param(0)]).withInterval(decl.sourceInterval(16813, 16876)), this.app("BitwiseANDExpression", [this.param(0)]).withInterval(decl.sourceInterval(16891, 16920))).withInterval(decl.sourceInterval(16813, 16920)))
    .define("BitwiseORExpression_bor", ["guardIn"], this.seq(this.app("BitwiseORExpression", [this.param(0)]).withInterval(decl.sourceInterval(16959, 16987)), this.terminal("|").withInterval(decl.sourceInterval(16988, 16991)), this.app("BitwiseXORExpression", [this.param(0)]).withInterval(decl.sourceInterval(16992, 17021))).withInterval(decl.sourceInterval(16959, 17021)))
    .define("BitwiseORExpression", ["guardIn"], this.alt(this.app("BitwiseORExpression_bor", [this.param(0)]).withInterval(decl.sourceInterval(16959, 17021)), this.app("BitwiseXORExpression", [this.param(0)]).withInterval(decl.sourceInterval(17035, 17064))).withInterval(decl.sourceInterval(16959, 17064)))
    .define("LogicalANDExpression_land", ["guardIn"], this.seq(this.app("LogicalANDExpression", [this.param(0)]).withInterval(decl.sourceInterval(17104, 17133)), this.terminal("&&").withInterval(decl.sourceInterval(17134, 17138)), this.app("BitwiseORExpression", [this.param(0)]).withInterval(decl.sourceInterval(17139, 17167))).withInterval(decl.sourceInterval(17104, 17167)))
    .define("LogicalANDExpression", ["guardIn"], this.alt(this.app("LogicalANDExpression_land", [this.param(0)]).withInterval(decl.sourceInterval(17104, 17167)), this.app("BitwiseORExpression", [this.param(0)]).withInterval(decl.sourceInterval(17182, 17210))).withInterval(decl.sourceInterval(17104, 17210)))
    .define("LogicalORExpression_lor", ["guardIn"], this.seq(this.app("LogicalORExpression", [this.param(0)]).withInterval(decl.sourceInterval(17249, 17277)), this.terminal("||").withInterval(decl.sourceInterval(17278, 17282)), this.app("LogicalANDExpression", [this.param(0)]).withInterval(decl.sourceInterval(17283, 17312))).withInterval(decl.sourceInterval(17249, 17312)))
    .define("LogicalORExpression", ["guardIn"], this.alt(this.app("LogicalORExpression_lor", [this.param(0)]).withInterval(decl.sourceInterval(17249, 17312)), this.app("LogicalANDExpression", [this.param(0)]).withInterval(decl.sourceInterval(17326, 17355))).withInterval(decl.sourceInterval(17249, 17355)))
    .define("ConditionalExpression_conditional", ["guardIn"], this.seq(this.app("LogicalORExpression", [this.param(0)]).withInterval(decl.sourceInterval(17396, 17424)), this.terminal("?").withInterval(decl.sourceInterval(17425, 17428)), this.app("AssignmentExpression", [this.app("withIn").withInterval(decl.sourceInterval(17450, 17456))]).withInterval(decl.sourceInterval(17429, 17457)), this.terminal(":").withInterval(decl.sourceInterval(17458, 17461)), this.app("AssignmentExpression", [this.param(0)]).withInterval(decl.sourceInterval(17462, 17491))).withInterval(decl.sourceInterval(17396, 17491)))
    .define("ConditionalExpression", ["guardIn"], this.alt(this.app("ConditionalExpression_conditional", [this.param(0)]).withInterval(decl.sourceInterval(17396, 17491)), this.app("LogicalORExpression", [this.param(0)]).withInterval(decl.sourceInterval(17513, 17541))).withInterval(decl.sourceInterval(17396, 17541)))
    .define("AssignmentExpression_assignment", ["guardIn"], this.seq(this.app("LeftHandSideExpression").withInterval(decl.sourceInterval(17581, 17603)), this.app("AssignmentOperator").withInterval(decl.sourceInterval(17604, 17622)), this.app("AssignmentExpression", [this.param(0)]).withInterval(decl.sourceInterval(17623, 17652))).withInterval(decl.sourceInterval(17581, 17652)))
    .define("AssignmentExpression", ["guardIn"], this.alt(this.app("AssignmentExpression_assignment", [this.param(0)]).withInterval(decl.sourceInterval(17581, 17652)), this.app("ConditionalExpression", [this.param(0)]).withInterval(decl.sourceInterval(17673, 17703))).withInterval(decl.sourceInterval(17581, 17703)))
    .define("Expression_commaExp", ["guardIn"], this.seq(this.app("Expression", [this.param(0)]).withInterval(decl.sourceInterval(17749, 17768)), this.terminal(",").withInterval(decl.sourceInterval(17769, 17772)), this.app("AssignmentExpression", [this.param(0)]).withInterval(decl.sourceInterval(17773, 17802))).withInterval(decl.sourceInterval(17749, 17802)))
    .define("Expression", ["guardIn"], this.alt(this.app("Expression_commaExp", [this.param(0)]).withInterval(decl.sourceInterval(17749, 17802)), this.app("AssignmentExpression", [this.param(0)]).withInterval(decl.sourceInterval(17821, 17850))).withInterval(decl.sourceInterval(17749, 17850)), "an expression")
    .define("AssignmentOperator", [], this.alt(this.terminal("=").withInterval(decl.sourceInterval(17875, 17878)), this.terminal(">>>=").withInterval(decl.sourceInterval(17881, 17887)), this.terminal("<<=").withInterval(decl.sourceInterval(17890, 17895)), this.terminal(">>=").withInterval(decl.sourceInterval(17898, 17903)), this.terminal("*=").withInterval(decl.sourceInterval(17927, 17931)), this.terminal("/=").withInterval(decl.sourceInterval(17934, 17938)), this.terminal("%=").withInterval(decl.sourceInterval(17941, 17945)), this.terminal("+=").withInterval(decl.sourceInterval(17948, 17952)), this.terminal("-=").withInterval(decl.sourceInterval(17955, 17959)), this.terminal("&=").withInterval(decl.sourceInterval(17962, 17966)), this.terminal("^=").withInterval(decl.sourceInterval(17969, 17973)), this.terminal("|=").withInterval(decl.sourceInterval(17976, 17980))).withInterval(decl.sourceInterval(17875, 17980)))
    .define("Statement", [], this.alt(this.app("Block").withInterval(decl.sourceInterval(18077, 18082)), this.app("VariableStatement").withInterval(decl.sourceInterval(18089, 18106)), this.app("EmptyStatement").withInterval(decl.sourceInterval(18113, 18127)), this.app("ExpressionStatement").withInterval(decl.sourceInterval(18134, 18153)), this.app("IfStatement").withInterval(decl.sourceInterval(18160, 18171)), this.app("IterationStatement").withInterval(decl.sourceInterval(18178, 18196)), this.app("ContinueStatement").withInterval(decl.sourceInterval(18203, 18220)), this.app("BreakStatement").withInterval(decl.sourceInterval(18227, 18241)), this.app("ReturnStatement").withInterval(decl.sourceInterval(18248, 18263)), this.app("WithStatement").withInterval(decl.sourceInterval(18270, 18283)), this.app("LabelledStatement").withInterval(decl.sourceInterval(18290, 18307)), this.app("SwitchStatement").withInterval(decl.sourceInterval(18314, 18329)), this.app("ThrowStatement").withInterval(decl.sourceInterval(18336, 18350)), this.app("TryStatement").withInterval(decl.sourceInterval(18357, 18369)), this.app("DebuggerStatement").withInterval(decl.sourceInterval(18376, 18393))).withInterval(decl.sourceInterval(18077, 18393)))
    .define("Block", [], this.seq(this.terminal("{").withInterval(decl.sourceInterval(18405, 18408)), this.app("StatementList").withInterval(decl.sourceInterval(18409, 18422)), this.terminal("}").withInterval(decl.sourceInterval(18423, 18426))).withInterval(decl.sourceInterval(18405, 18426)))
    .define("StatementList", [], this.star(this.app("Statement").withInterval(decl.sourceInterval(18446, 18455))).withInterval(decl.sourceInterval(18446, 18456)))
    .define("VariableStatement", [], this.seq(this.app("var").withInterval(decl.sourceInterval(18480, 18483)), this.app("VariableDeclarationList", [this.app("withIn").withInterval(decl.sourceInterval(18508, 18514))]).withInterval(decl.sourceInterval(18484, 18515)), this.lex(this.app("sc").withInterval(decl.sourceInterval(18517, 18519))).withInterval(decl.sourceInterval(18516, 18519))).withInterval(decl.sourceInterval(18480, 18519)))
    .define("VariableDeclarationList", ["guardIn"], this.app("NonemptyListOf", [this.app("VariableDeclaration", [this.param(0)]).withInterval(decl.sourceInterval(18573, 18601)), this.terminal(",").withInterval(decl.sourceInterval(18603, 18606))]).withInterval(decl.sourceInterval(18558, 18607)))
    .define("VariableDeclaration", ["guardIn"], this.seq(this.app("identifier").withInterval(decl.sourceInterval(18642, 18652)), this.opt(this.app("Initialiser", [this.param(0)]).withInterval(decl.sourceInterval(18653, 18673))).withInterval(decl.sourceInterval(18653, 18674))).withInterval(decl.sourceInterval(18642, 18674)))
    .define("Initialiser", ["guardIn"], this.seq(this.terminal("=").withInterval(decl.sourceInterval(18701, 18704)), this.app("AssignmentExpression", [this.param(0)]).withInterval(decl.sourceInterval(18705, 18734))).withInterval(decl.sourceInterval(18701, 18734)))
    .define("EmptyStatement", [], this.terminal(";").withInterval(decl.sourceInterval(18755, 18758)))
    .define("ExpressionStatement", [], this.seq(this.not(this.alt(this.terminal("{").withInterval(decl.sourceInterval(18824, 18827)), this.app("function").withInterval(decl.sourceInterval(18830, 18838))).withInterval(decl.sourceInterval(18824, 18838))).withInterval(decl.sourceInterval(18822, 18839)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(18851, 18857))]).withInterval(decl.sourceInterval(18840, 18858)), this.lex(this.app("sc").withInterval(decl.sourceInterval(18860, 18862))).withInterval(decl.sourceInterval(18859, 18862))).withInterval(decl.sourceInterval(18822, 18862)))
    .define("IfStatement", [], this.seq(this.app("if").withInterval(decl.sourceInterval(18880, 18882)), this.terminal("(").withInterval(decl.sourceInterval(18883, 18886)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(18898, 18904))]).withInterval(decl.sourceInterval(18887, 18905)), this.terminal(")").withInterval(decl.sourceInterval(18906, 18909)), this.app("Statement").withInterval(decl.sourceInterval(18910, 18919)), this.opt(this.seq(this.app("else").withInterval(decl.sourceInterval(18921, 18925)), this.app("Statement").withInterval(decl.sourceInterval(18926, 18935))).withInterval(decl.sourceInterval(18921, 18935))).withInterval(decl.sourceInterval(18920, 18937))).withInterval(decl.sourceInterval(18880, 18937)))
    .define("IterationStatement_doWhile", [], this.seq(this.app("do").withInterval(decl.sourceInterval(18962, 18964)), this.app("Statement").withInterval(decl.sourceInterval(18965, 18974)), this.app("while").withInterval(decl.sourceInterval(18975, 18980)), this.terminal("(").withInterval(decl.sourceInterval(18981, 18984)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(18996, 19002))]).withInterval(decl.sourceInterval(18985, 19003)), this.terminal(")").withInterval(decl.sourceInterval(19004, 19007)), this.lex(this.app("sc").withInterval(decl.sourceInterval(19009, 19011))).withInterval(decl.sourceInterval(19008, 19011))).withInterval(decl.sourceInterval(18962, 19011)))
    .define("IterationStatement_whileDo", [], this.seq(this.app("while").withInterval(decl.sourceInterval(19047, 19052)), this.terminal("(").withInterval(decl.sourceInterval(19053, 19056)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(19068, 19074))]).withInterval(decl.sourceInterval(19057, 19075)), this.terminal(")").withInterval(decl.sourceInterval(19076, 19079)), this.app("Statement").withInterval(decl.sourceInterval(19080, 19089))).withInterval(decl.sourceInterval(19047, 19089)))
    .define("IterationStatement_for3", [], this.seq(this.app("for").withInterval(decl.sourceInterval(19134, 19137)), this.terminal("(").withInterval(decl.sourceInterval(19138, 19141)), this.opt(this.app("Expression", [this.app("noIn").withInterval(decl.sourceInterval(19153, 19157))]).withInterval(decl.sourceInterval(19142, 19158))).withInterval(decl.sourceInterval(19142, 19159)), this.terminal(";").withInterval(decl.sourceInterval(19160, 19163)), this.opt(this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(19208, 19214))]).withInterval(decl.sourceInterval(19197, 19215))).withInterval(decl.sourceInterval(19197, 19216)), this.terminal(";").withInterval(decl.sourceInterval(19217, 19220)), this.opt(this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(19265, 19271))]).withInterval(decl.sourceInterval(19254, 19272))).withInterval(decl.sourceInterval(19254, 19273)), this.terminal(")").withInterval(decl.sourceInterval(19274, 19277)), this.app("Statement").withInterval(decl.sourceInterval(19278, 19287))).withInterval(decl.sourceInterval(19134, 19287)))
    .define("IterationStatement_for3var", [], this.seq(this.app("for").withInterval(decl.sourceInterval(19328, 19331)), this.terminal("(").withInterval(decl.sourceInterval(19332, 19335)), this.app("var").withInterval(decl.sourceInterval(19336, 19339)), this.app("VariableDeclarationList", [this.app("noIn").withInterval(decl.sourceInterval(19364, 19368))]).withInterval(decl.sourceInterval(19340, 19369)), this.terminal(";").withInterval(decl.sourceInterval(19370, 19373)), this.opt(this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(19418, 19424))]).withInterval(decl.sourceInterval(19407, 19425))).withInterval(decl.sourceInterval(19407, 19426)), this.terminal(";").withInterval(decl.sourceInterval(19427, 19430)), this.opt(this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(19475, 19481))]).withInterval(decl.sourceInterval(19464, 19482))).withInterval(decl.sourceInterval(19464, 19483)), this.terminal(")").withInterval(decl.sourceInterval(19484, 19487)), this.app("Statement").withInterval(decl.sourceInterval(19488, 19497))).withInterval(decl.sourceInterval(19328, 19497)))
    .define("IterationStatement_forIn", [], this.seq(this.app("for").withInterval(decl.sourceInterval(19541, 19544)), this.terminal("(").withInterval(decl.sourceInterval(19545, 19548)), this.app("LeftHandSideExpression").withInterval(decl.sourceInterval(19549, 19571)), this.app("in").withInterval(decl.sourceInterval(19572, 19574)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(19619, 19625))]).withInterval(decl.sourceInterval(19608, 19626)), this.terminal(")").withInterval(decl.sourceInterval(19627, 19630)), this.app("Statement").withInterval(decl.sourceInterval(19631, 19640))).withInterval(decl.sourceInterval(19541, 19640)))
    .define("IterationStatement_forInVar", [], this.seq(this.app("for").withInterval(decl.sourceInterval(19683, 19686)), this.terminal("(").withInterval(decl.sourceInterval(19687, 19690)), this.app("var").withInterval(decl.sourceInterval(19691, 19694)), this.app("VariableDeclaration", [this.app("noIn").withInterval(decl.sourceInterval(19715, 19719))]).withInterval(decl.sourceInterval(19695, 19720)), this.app("in").withInterval(decl.sourceInterval(19721, 19723)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(19768, 19774))]).withInterval(decl.sourceInterval(19757, 19775)), this.terminal(")").withInterval(decl.sourceInterval(19776, 19779)), this.app("Statement").withInterval(decl.sourceInterval(19780, 19789))).withInterval(decl.sourceInterval(19683, 19789)))
    .define("IterationStatement", [], this.alt(this.app("IterationStatement_doWhile").withInterval(decl.sourceInterval(18962, 19011)), this.app("IterationStatement_whileDo").withInterval(decl.sourceInterval(19047, 19089)), this.app("IterationStatement_for3").withInterval(decl.sourceInterval(19134, 19287)), this.app("IterationStatement_for3var").withInterval(decl.sourceInterval(19328, 19497)), this.app("IterationStatement_forIn").withInterval(decl.sourceInterval(19541, 19640)), this.app("IterationStatement_forInVar").withInterval(decl.sourceInterval(19683, 19789))).withInterval(decl.sourceInterval(18962, 19811)))
    .define("ContinueStatement", [], this.seq(this.app("continue").withInterval(decl.sourceInterval(19835, 19843)), this.lex(this.seq(this.opt(this.seq(this.app("spacesNoNL").withInterval(decl.sourceInterval(19847, 19857)), this.app("identifier").withInterval(decl.sourceInterval(19858, 19868))).withInterval(decl.sourceInterval(19847, 19868))).withInterval(decl.sourceInterval(19846, 19870)), this.app("sc").withInterval(decl.sourceInterval(19871, 19873))).withInterval(decl.sourceInterval(19846, 19873))).withInterval(decl.sourceInterval(19844, 19874))).withInterval(decl.sourceInterval(19835, 19874)))
    .define("BreakStatement", [], this.seq(this.app("break").withInterval(decl.sourceInterval(19895, 19900)), this.lex(this.seq(this.opt(this.seq(this.app("spacesNoNL").withInterval(decl.sourceInterval(19904, 19914)), this.app("identifier").withInterval(decl.sourceInterval(19915, 19925))).withInterval(decl.sourceInterval(19904, 19925))).withInterval(decl.sourceInterval(19903, 19927)), this.app("sc").withInterval(decl.sourceInterval(19928, 19930))).withInterval(decl.sourceInterval(19903, 19930))).withInterval(decl.sourceInterval(19901, 19931))).withInterval(decl.sourceInterval(19895, 19931)))
    .define("ReturnStatement", [], this.seq(this.app("return").withInterval(decl.sourceInterval(19953, 19959)), this.opt(this.seq(this.lex(this.seq(this.app("spacesNoNL").withInterval(decl.sourceInterval(19963, 19973)), this.not(this.app("space").withInterval(decl.sourceInterval(19975, 19980))).withInterval(decl.sourceInterval(19974, 19980))).withInterval(decl.sourceInterval(19963, 19980))).withInterval(decl.sourceInterval(19961, 19981)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(19993, 19999))]).withInterval(decl.sourceInterval(19982, 20000))).withInterval(decl.sourceInterval(19961, 20000))).withInterval(decl.sourceInterval(19960, 20002)), this.lex(this.app("sc").withInterval(decl.sourceInterval(20004, 20006))).withInterval(decl.sourceInterval(20003, 20006))).withInterval(decl.sourceInterval(19953, 20006)))
    .define("WithStatement", [], this.seq(this.app("with").withInterval(decl.sourceInterval(20026, 20030)), this.terminal("(").withInterval(decl.sourceInterval(20031, 20034)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(20046, 20052))]).withInterval(decl.sourceInterval(20035, 20053)), this.terminal(")").withInterval(decl.sourceInterval(20054, 20057)), this.app("Statement").withInterval(decl.sourceInterval(20058, 20067))).withInterval(decl.sourceInterval(20026, 20067)))
    .define("SwitchStatement", [], this.seq(this.app("switch").withInterval(decl.sourceInterval(20089, 20095)), this.terminal("(").withInterval(decl.sourceInterval(20096, 20099)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(20111, 20117))]).withInterval(decl.sourceInterval(20100, 20118)), this.terminal(")").withInterval(decl.sourceInterval(20119, 20122)), this.app("CaseBlock").withInterval(decl.sourceInterval(20123, 20132))).withInterval(decl.sourceInterval(20089, 20132)))
    .define("CaseBlock_withDefault", [], this.seq(this.terminal("{").withInterval(decl.sourceInterval(20148, 20151)), this.star(this.app("CaseClause").withInterval(decl.sourceInterval(20152, 20162))).withInterval(decl.sourceInterval(20152, 20163)), this.app("DefaultClause").withInterval(decl.sourceInterval(20164, 20177)), this.star(this.app("CaseClause").withInterval(decl.sourceInterval(20178, 20188))).withInterval(decl.sourceInterval(20178, 20189)), this.terminal("}").withInterval(decl.sourceInterval(20190, 20193))).withInterval(decl.sourceInterval(20148, 20193)))
    .define("CaseBlock_withoutDefault", [], this.seq(this.terminal("{").withInterval(decl.sourceInterval(20224, 20227)), this.star(this.app("CaseClause").withInterval(decl.sourceInterval(20254, 20264))).withInterval(decl.sourceInterval(20254, 20265)), this.terminal("}").withInterval(decl.sourceInterval(20266, 20269))).withInterval(decl.sourceInterval(20224, 20269)))
    .define("CaseBlock", [], this.alt(this.app("CaseBlock_withDefault").withInterval(decl.sourceInterval(20148, 20193)), this.app("CaseBlock_withoutDefault").withInterval(decl.sourceInterval(20224, 20269))).withInterval(decl.sourceInterval(20148, 20288)))
    .define("CaseClause", [], this.seq(this.app("case").withInterval(decl.sourceInterval(20305, 20309)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(20321, 20327))]).withInterval(decl.sourceInterval(20310, 20328)), this.terminal(":").withInterval(decl.sourceInterval(20329, 20332)), this.star(this.app("Statement").withInterval(decl.sourceInterval(20333, 20342))).withInterval(decl.sourceInterval(20333, 20343))).withInterval(decl.sourceInterval(20305, 20343)))
    .define("DefaultClause", [], this.seq(this.app("default").withInterval(decl.sourceInterval(20363, 20370)), this.terminal(":").withInterval(decl.sourceInterval(20371, 20374)), this.star(this.app("Statement").withInterval(decl.sourceInterval(20375, 20384))).withInterval(decl.sourceInterval(20375, 20385))).withInterval(decl.sourceInterval(20363, 20385)))
    .define("LabelledStatement", [], this.seq(this.app("identifier").withInterval(decl.sourceInterval(20409, 20419)), this.terminal(":").withInterval(decl.sourceInterval(20420, 20423)), this.app("Statement").withInterval(decl.sourceInterval(20424, 20433))).withInterval(decl.sourceInterval(20409, 20433)))
    .define("ThrowStatement_throwExpr", [], this.seq(this.app("throw").withInterval(decl.sourceInterval(20454, 20459)), this.app("Expression", [this.app("withIn").withInterval(decl.sourceInterval(20471, 20477))]).withInterval(decl.sourceInterval(20460, 20478)), this.lex(this.app("sc").withInterval(decl.sourceInterval(20480, 20482))).withInterval(decl.sourceInterval(20479, 20482))).withInterval(decl.sourceInterval(20454, 20482)))
    .define("ThrowStatement", [], this.app("ThrowStatement_throwExpr").withInterval(decl.sourceInterval(20454, 20496)))
    .define("TryStatement_tryCatchFinally", [], this.seq(this.app("try").withInterval(decl.sourceInterval(20515, 20518)), this.app("Block").withInterval(decl.sourceInterval(20519, 20524)), this.app("Catch").withInterval(decl.sourceInterval(20525, 20530)), this.app("Finally").withInterval(decl.sourceInterval(20531, 20538))).withInterval(decl.sourceInterval(20515, 20538)))
    .define("TryStatement_tryFinally", [], this.seq(this.app("try").withInterval(decl.sourceInterval(20576, 20579)), this.app("Block").withInterval(decl.sourceInterval(20580, 20585)), this.app("Finally").withInterval(decl.sourceInterval(20586, 20593))).withInterval(decl.sourceInterval(20576, 20593)))
    .define("TryStatement_tryCatch", [], this.seq(this.app("try").withInterval(decl.sourceInterval(20632, 20635)), this.app("Block").withInterval(decl.sourceInterval(20636, 20641)), this.app("Catch").withInterval(decl.sourceInterval(20642, 20647))).withInterval(decl.sourceInterval(20632, 20647)))
    .define("TryStatement", [], this.alt(this.app("TryStatement_tryCatchFinally").withInterval(decl.sourceInterval(20515, 20538)), this.app("TryStatement_tryFinally").withInterval(decl.sourceInterval(20576, 20593)), this.app("TryStatement_tryCatch").withInterval(decl.sourceInterval(20632, 20647))).withInterval(decl.sourceInterval(20515, 20668)))
    .define("Catch", [], this.seq(this.app("catch").withInterval(decl.sourceInterval(20680, 20685)), this.terminal("(").withInterval(decl.sourceInterval(20686, 20689)), this.app("FormalParameter").withInterval(decl.sourceInterval(20690, 20705)), this.terminal(")").withInterval(decl.sourceInterval(20706, 20709)), this.app("Block").withInterval(decl.sourceInterval(20710, 20715))).withInterval(decl.sourceInterval(20680, 20715)))
    .define("Finally", [], this.seq(this.app("finally").withInterval(decl.sourceInterval(20729, 20736)), this.app("Block").withInterval(decl.sourceInterval(20737, 20742))).withInterval(decl.sourceInterval(20729, 20742)))
    .define("DebuggerStatement", [], this.lex(this.seq(this.app("debugger").withInterval(decl.sourceInterval(20768, 20776)), this.app("sc").withInterval(decl.sourceInterval(20777, 20779))).withInterval(decl.sourceInterval(20768, 20779))).withInterval(decl.sourceInterval(20766, 20780)))
    .define("FunctionDeclaration", [], this.seq(this.app("function").withInterval(decl.sourceInterval(20899, 20907)), this.app("identifier").withInterval(decl.sourceInterval(20908, 20918)), this.terminal("(").withInterval(decl.sourceInterval(20919, 20922)), this.app("FormalParameterList").withInterval(decl.sourceInterval(20923, 20942)), this.terminal(")").withInterval(decl.sourceInterval(20943, 20946)), this.terminal("{").withInterval(decl.sourceInterval(20947, 20950)), this.app("FunctionBody").withInterval(decl.sourceInterval(20951, 20963)), this.terminal("}").withInterval(decl.sourceInterval(20964, 20967))).withInterval(decl.sourceInterval(20899, 20967)))
    .define("FunctionExpression_named", [], this.seq(this.app("function").withInterval(decl.sourceInterval(20996, 21004)), this.app("identifier").withInterval(decl.sourceInterval(21005, 21015)), this.terminal("(").withInterval(decl.sourceInterval(21016, 21019)), this.app("FormalParameterList").withInterval(decl.sourceInterval(21020, 21039)), this.terminal(")").withInterval(decl.sourceInterval(21040, 21043)), this.terminal("{").withInterval(decl.sourceInterval(21044, 21047)), this.app("FunctionBody").withInterval(decl.sourceInterval(21048, 21060)), this.terminal("}").withInterval(decl.sourceInterval(21061, 21064))).withInterval(decl.sourceInterval(20996, 21064)))
    .define("FunctionExpression_anonymous", [], this.seq(this.app("function").withInterval(decl.sourceInterval(21081, 21089)), this.terminal("(").withInterval(decl.sourceInterval(21090, 21093)), this.app("FormalParameterList").withInterval(decl.sourceInterval(21094, 21113)), this.terminal(")").withInterval(decl.sourceInterval(21114, 21117)), this.terminal("{").withInterval(decl.sourceInterval(21118, 21121)), this.app("FunctionBody").withInterval(decl.sourceInterval(21122, 21134)), this.terminal("}").withInterval(decl.sourceInterval(21135, 21138))).withInterval(decl.sourceInterval(21081, 21138)))
    .define("FunctionExpression", [], this.alt(this.app("FunctionExpression_named").withInterval(decl.sourceInterval(20996, 21064)), this.app("FunctionExpression_anonymous").withInterval(decl.sourceInterval(21081, 21138))).withInterval(decl.sourceInterval(20996, 21163)))
    .define("FormalParameterList", [], this.app("ListOf", [this.app("FormalParameter").withInterval(decl.sourceInterval(21196, 21211)), this.terminal(",").withInterval(decl.sourceInterval(21213, 21216))]).withInterval(decl.sourceInterval(21189, 21217)))
    .define("FormalParameter", [], this.app("identifier").withInterval(decl.sourceInterval(21239, 21249)))
    .define("FunctionBody", [], this.seq(this.star(this.app("Directive").withInterval(decl.sourceInterval(21268, 21277))).withInterval(decl.sourceInterval(21268, 21278)), this.star(this.app("SourceElement").withInterval(decl.sourceInterval(21279, 21292))).withInterval(decl.sourceInterval(21279, 21293))).withInterval(decl.sourceInterval(21268, 21293)))
    .define("SourceElement", [], this.alt(this.app("Declaration").withInterval(decl.sourceInterval(21313, 21324)), this.app("Statement").withInterval(decl.sourceInterval(21327, 21336))).withInterval(decl.sourceInterval(21313, 21336)))
    .define("Declaration", [], this.app("FunctionDeclaration").withInterval(decl.sourceInterval(21423, 21442)))
    .define("Directive", [], this.seq(this.app("stringLiteral").withInterval(decl.sourceInterval(21458, 21471)), this.lex(this.app("sc").withInterval(decl.sourceInterval(21473, 21475))).withInterval(decl.sourceInterval(21472, 21475))).withInterval(decl.sourceInterval(21458, 21475)))
    .build();
});
  var decl = this.newGrammar("ES6")
    .withSource("ES6 <: ES5 {\n  AssignmentExpression<guardIn> += ArrowFunction<guardIn>\n\n  ArrowFunction<guardIn> = ArrowParameters<guardIn> #(spacesNoNL \"=>\") ConciseBody<guardIn>\n\n  ConciseBody<guardIn> = ~\"{\" AssignmentExpression<guardIn>  -- noBraces\n                       | \"{\" FunctionBody \"}\"                -- withBraces\n\n  ArrowParameters<guardIn> = BindingIdentifier<guardIn>  -- unparenthesized\n                           | CoverParenthesizedExpressionAndArrowParameterList<guardIn>\n\n  BindingIdentifier<guardIn> = identifier  // TODO: Implement this properly.\n\n  CoverParenthesizedExpressionAndArrowParameterList<guardIn>\n    = \"(\" Expression<guardIn> \")\"  -- expression\n    | \"(\" \")\"                      -- parens\n    | \"(\" FormalParameterList \")\"  -- params\n}")
    .withSuperGrammar(buildSuperGrammar.call(this))
    .withDefaultStartRule("Program")
  return decl
    .extend("AssignmentExpression", ["guardIn"], this.app("ArrowFunction", [this.param(0)]).withInterval(decl.sourceInterval(48, 70)))
    .define("ArrowFunction", ["guardIn"], this.seq(this.app("ArrowParameters", [this.param(0)]).withInterval(decl.sourceInterval(99, 123)), this.lex(this.seq(this.app("spacesNoNL").withInterval(decl.sourceInterval(126, 136)), this.terminal("=>").withInterval(decl.sourceInterval(137, 141))).withInterval(decl.sourceInterval(126, 141))).withInterval(decl.sourceInterval(124, 142)), this.app("ConciseBody", [this.param(0)]).withInterval(decl.sourceInterval(143, 163))).withInterval(decl.sourceInterval(99, 163)))
    .define("ConciseBody_noBraces", ["guardIn"], this.seq(this.not(this.terminal("{").withInterval(decl.sourceInterval(191, 194))).withInterval(decl.sourceInterval(190, 194)), this.app("AssignmentExpression", [this.param(0)]).withInterval(decl.sourceInterval(195, 224))).withInterval(decl.sourceInterval(190, 224)))
    .define("ConciseBody_withBraces", ["guardIn"], this.seq(this.terminal("{").withInterval(decl.sourceInterval(263, 266)), this.app("FunctionBody").withInterval(decl.sourceInterval(267, 279)), this.terminal("}").withInterval(decl.sourceInterval(280, 283))).withInterval(decl.sourceInterval(263, 283)))
    .define("ConciseBody", ["guardIn"], this.alt(this.app("ConciseBody_noBraces", [this.param(0)]).withInterval(decl.sourceInterval(190, 224)), this.app("ConciseBody_withBraces", [this.param(0)]).withInterval(decl.sourceInterval(263, 283))).withInterval(decl.sourceInterval(190, 312)))
    .define("ArrowParameters_unparenthesized", ["guardIn"], this.app("BindingIdentifier", [this.param(0)]).withInterval(decl.sourceInterval(343, 369)))
    .define("ArrowParameters", ["guardIn"], this.alt(this.app("ArrowParameters_unparenthesized", [this.param(0)]).withInterval(decl.sourceInterval(343, 369)), this.app("CoverParenthesizedExpressionAndArrowParameterList", [this.param(0)]).withInterval(decl.sourceInterval(419, 477))).withInterval(decl.sourceInterval(343, 477)))
    .define("BindingIdentifier", ["guardIn"], this.app("identifier").withInterval(decl.sourceInterval(510, 520)))
    .define("CoverParenthesizedExpressionAndArrowParameterList_expression", ["guardIn"], this.seq(this.terminal("(").withInterval(decl.sourceInterval(624, 627)), this.app("Expression", [this.param(0)]).withInterval(decl.sourceInterval(628, 647)), this.terminal(")").withInterval(decl.sourceInterval(648, 651))).withInterval(decl.sourceInterval(624, 651)))
    .define("CoverParenthesizedExpressionAndArrowParameterList_parens", ["guardIn"], this.seq(this.terminal("(").withInterval(decl.sourceInterval(673, 676)), this.terminal(")").withInterval(decl.sourceInterval(677, 680))).withInterval(decl.sourceInterval(673, 680)))
    .define("CoverParenthesizedExpressionAndArrowParameterList_params", ["guardIn"], this.seq(this.terminal("(").withInterval(decl.sourceInterval(718, 721)), this.app("FormalParameterList").withInterval(decl.sourceInterval(722, 741)), this.terminal(")").withInterval(decl.sourceInterval(742, 745))).withInterval(decl.sourceInterval(718, 745)))
    .define("CoverParenthesizedExpressionAndArrowParameterList", ["guardIn"], this.alt(this.app("CoverParenthesizedExpressionAndArrowParameterList_expression", [this.param(0)]).withInterval(decl.sourceInterval(624, 651)), this.app("CoverParenthesizedExpressionAndArrowParameterList_parens", [this.param(0)]).withInterval(decl.sourceInterval(673, 680)), this.app("CoverParenthesizedExpressionAndArrowParameterList_params", [this.param(0)]).withInterval(decl.sourceInterval(718, 745))).withInterval(decl.sourceInterval(624, 756)))
    .build();
});